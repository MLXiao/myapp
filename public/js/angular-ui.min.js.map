{"version":3,"sources":["angular-ui-router.js"],"names":["module","exports","window","angular","undefined","inherit","parent","extra","extend","prototype","merge","dst","forEach","arguments","obj","value","key","hasOwnProperty","ancestors","first","second","path","n","push","objectKeys","object","Object","keys","result","val","indexOf","array","Array","Number","len","length","from","Math","ceil","floor","inheritParams","currentParams","newParams","$current","$to","parentParams","parents","inherited","inheritList","i","params","j","equalForKeys","a","b","k","filterByKeys","values","filtered","name","pick","copy","concat","apply","slice","call","omit","filter","collection","callback","isArray","map","$Resolve","$q","$injector","VISIT_IN_PROGRESS","VISIT_DONE","NOTHING","NO_DEPENDENCIES","NO_LOCALS","NO_PARENT","when","$$promises","$$values","this","study","invocables","visit","visited","cycle","splice","Error","join","isString","plan","get","annotate","param","pop","isResolve","isObject","then","invocableKeys","locals","self","done","wait","merged","$$inheritedValues","resolution","resolve","fail","reason","$$failure","reject","invoke","invocable","onfailure","invocation","proceed","isDefined","promise","e","defer","waitParams","dep","promises","ii","$TemplateFactory","$http","$templateCache","fromConfig","config","template","fromString","templateUrl","fromUrl","templateProvider","fromProvider","isFunction","url","cache","headers","Accept","response","data","provider","UrlMatcher","pattern","parentMatcher","addParameter","id","type","location","paramNames","test","$$UMFP","Param","quoteRegExp","string","squash","optional","surroundPattern","replace","matchDetails","m","isSearch","regexp","segment","cfg","substring","last","index","RegExp","caseInsensitive","placeholder","searchPlaceholder","compiled","segments","$$new","ParamSet","source","p","exec","isOptional","lastIndex","search","sourceSearch","sourcePath","strict","prefix","$$paramNames","Type","$UrlMatcherFactory","valToString","toString","valFromString","getDefaultConfig","isStrictMode","isCaseInsensitive","isInjectable","flushTypeQueue","typeQueue","shift","$types","injector","def","defaultSquashPolicy","enqueue","defaultTypes","encode","decode","is","int","parseInt","bool","date","getFullYear","getMonth","getDate","match","capture","Date","isNaN","valueOf","equals","toISOString","json","toJson","fromJson","any","identity","$$getDefaultValue","strictMode","compile","isMatcher","o","definition","definitionFn","$get","unwrapShorthand","isShorthand","$$fn","getType","urlType","getArrayMode","arrayDefaults","arrayParamNomenclature","getSquashPolicy","getReplace","arrayMode","configuredKeys","defaultPolicy","to","item","defaultValue","$value","hasReplaceVal","$replace","replacement","$normalize","$asArray","dynamic","$$parent","$$keys","chain","ignore","reverse","paramset","paramValues","$$equals","paramValues1","paramValues2","equal","left","right","$$validates","rawVal","normalized","encoded","$UrlRouterProvider","$locationProvider","$urlMatcherFactory","regExpPrefix","re","interpolate","what","handleIfMatch","handler","$match","$location","$rootScope","$browser","appendBasePath","isHtml5","absolute","baseHref","update","evt","check","rule","handled","defaultPrevented","lastPushedUrl","rules","otherwise","listen","listener","$on","interceptDeferred","sync","read","urlMatcher","options","format","$$avoidResync","href","validates","html5Mode","enabled","hashPrefix","slash","port","protocol","host","redirect","handlerIsString","strategies","matcher","regex","global","sticky","deferIntercept","$inject","$StateProvider","$urlRouterProvider","isRelative","stateName","findState","stateOrName","base","isStr","rel","split","pathLength","current","state","states","queueState","parentName","queue","flushQueuedChildren","queued","registerState","lastIndexOf","stateBuilder","$delegates","abstractKey","$stateParams","$state","navigable","transitionTo","isGlob","text","doesStateMatchGlob","glob","globSegments","l","unshift","MAX_VALUE","decorator","func","$view","$resolve","$urlRouter","handleRedirect","$broadcast","TransitionAborted","retry","$retry","TransitionFailed","retryTransition","transition","TransitionSuperseded","toParams","resolveState","paramsAreFiltered","resolveViews","viewsPromises","views","view","injectables","$template","load","globals","notify","controllerProvider","injectLocals","$$controller","controller","$$state","$$controllerAs","controllerAs","all","TransitionPrevented","root","reload","go","relative","fromParams","fromPath","toState","hash","redirectResult","toPath","keep","toLocals","reloadState","ownParams","shouldSkipReload","resolved","entering","exiting","onExit","onEnter","error","includes","lossy","nav","context","nonSearchParamsEqual","fromAndToState","notSearchParam","nonQueryParamKeys","nonQueryParams","nonQueryParamSet","reloadOnSearch","compositeName","charAt","","abstract","$ViewProvider","$templateFactory","defaults","async","$ViewScrollProvider","useAnchorScroll","$anchorScroll","$timeout","$element","scrollIntoView","$ViewDirective","$uiViewScroll","$interpolate","getService","service","has","getRenderer","attrs","scope","statics","enter","element","target","cb","after","leave","remove","$animate","$animator","animate","directive","restrict","terminal","priority","transclude","tElement","tAttrs","$transclude","cleanupLastView","previousEl","currentScope","$destroy","currentEl","renderer","updateView","firstTime","newScope","getUiViewName","previousLocals","latestLocals","$new","clone","$emit","autoScrollExp","$eval","onloadExp","onload","autoscroll","$ViewDirectiveFill","$compile","$controller","initial","html","link","contents","$scope","children","uiView","inheritedData","parseStateRef","ref","parsed","preparsed","paramExpr","stateContext","el","stateData","$StateRefDirective","allowedOptions","require","uiSrefActive","uiSref","hrefKind","prop","newHref","isAnchor","toUpperCase","isForm","nodeName","attr","optionsOverride","uiSrefOpts","option","newVal","activeDirective","$$addStateInfo","$set","$watch","oldVal","bind","button","which","ctrlKey","metaKey","shiftKey","preventDefault","ignorePreventDefaultCount","cancel","$StateRefActiveDirective","$attrs","anyMatch","addClass","activeClass","removeClass","isMatch","uiSrefActiveEq","newState","$IsStateFilter","isFilter","$stateful","$IncludedByStateFilter","includesFilter","defaultConfig","searchParams","decodePathArray","reverseString","str","unquoteDashes","allReversed","paramName","parameters","nTotal","nPath","paramVal","encodeDashes","encodeURIComponent","c","charCodeAt","isPathParam","isDefaultValue","nextSegment","$subPattern","sub","substr","mode","ArrayType","bindTo","callbackName","arrayWrap","arrayUnwrap","falsey","arrayHandler","allTruthyMode","arrayEqualsHandler","val1","val2","$arrayMode","run"],"mappings":"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","file":"angular-ui.min.js","sourcesContent":["/**\n * State-based routing for AngularJS\n * @version v0.2.15\n * @link http://angular-ui.github.com/\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n\n/* commonjs package manager support (eg componentjs) */\nif (typeof module !== \"undefined\" && typeof exports !== \"undefined\" && module.exports === exports){\n  module.exports = 'ui.router';\n}\n\n(function (window, angular, undefined) {\n/*jshint globalstrict:true*/\n/*global angular:false*/\n'use strict';\n\nvar isDefined = angular.isDefined,\n    isFunction = angular.isFunction,\n    isString = angular.isString,\n    isObject = angular.isObject,\n    isArray = angular.isArray,\n    forEach = angular.forEach,\n    extend = angular.extend,\n    copy = angular.copy;\n\nfunction inherit(parent, extra) {\n  return extend(new (extend(function() {}, { prototype: parent }))(), extra);\n}\n\nfunction merge(dst) {\n  forEach(arguments, function(obj) {\n    if (obj !== dst) {\n      forEach(obj, function(value, key) {\n        if (!dst.hasOwnProperty(key)) dst[key] = value;\n      });\n    }\n  });\n  return dst;\n}\n\n/**\n * Finds the common ancestor path between two states.\n *\n * @param {Object} first The first state.\n * @param {Object} second The second state.\n * @return {Array} Returns an array of state names in descending order, not including the root.\n */\nfunction ancestors(first, second) {\n  var path = [];\n\n  for (var n in first.path) {\n    if (first.path[n] !== second.path[n]) break;\n    path.push(first.path[n]);\n  }\n  return path;\n}\n\n/**\n * IE8-safe wrapper for `Object.keys()`.\n *\n * @param {Object} object A JavaScript object.\n * @return {Array} Returns the keys of the object as an array.\n */\nfunction objectKeys(object) {\n  if (Object.keys) {\n    return Object.keys(object);\n  }\n  var result = [];\n\n  forEach(object, function(val, key) {\n    result.push(key);\n  });\n  return result;\n}\n\n/**\n * IE8-safe wrapper for `Array.prototype.indexOf()`.\n *\n * @param {Array} array A JavaScript array.\n * @param {*} value A value to search the array for.\n * @return {Number} Returns the array index value of `value`, or `-1` if not present.\n */\nfunction indexOf(array, value) {\n  if (Array.prototype.indexOf) {\n    return array.indexOf(value, Number(arguments[2]) || 0);\n  }\n  var len = array.length >>> 0, from = Number(arguments[2]) || 0;\n  from = (from < 0) ? Math.ceil(from) : Math.floor(from);\n\n  if (from < 0) from += len;\n\n  for (; from < len; from++) {\n    if (from in array && array[from] === value) return from;\n  }\n  return -1;\n}\n\n/**\n * Merges a set of parameters with all parameters inherited between the common parents of the\n * current state and a given destination state.\n *\n * @param {Object} currentParams The value of the current state parameters ($stateParams).\n * @param {Object} newParams The set of parameters which will be composited with inherited params.\n * @param {Object} $current Internal definition of object representing the current state.\n * @param {Object} $to Internal definition of object representing state to transition to.\n */\nfunction inheritParams(currentParams, newParams, $current, $to) {\n  var parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];\n\n  for (var i in parents) {\n    if (!parents[i].params) continue;\n    parentParams = objectKeys(parents[i].params);\n    if (!parentParams.length) continue;\n\n    for (var j in parentParams) {\n      if (indexOf(inheritList, parentParams[j]) >= 0) continue;\n      inheritList.push(parentParams[j]);\n      inherited[parentParams[j]] = currentParams[parentParams[j]];\n    }\n  }\n  return extend({}, inherited, newParams);\n}\n\n/**\n * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.\n *\n * @param {Object} a The first object.\n * @param {Object} b The second object.\n * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,\n *                     it defaults to the list of keys in `a`.\n * @return {Boolean} Returns `true` if the keys match, otherwise `false`.\n */\nfunction equalForKeys(a, b, keys) {\n  if (!keys) {\n    keys = [];\n    for (var n in a) keys.push(n); // Used instead of Object.keys() for IE8 compatibility\n  }\n\n  for (var i=0; i<keys.length; i++) {\n    var k = keys[i];\n    if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized\n  }\n  return true;\n}\n\n/**\n * Returns the subset of an object, based on a list of keys.\n *\n * @param {Array} keys\n * @param {Object} values\n * @return {Boolean} Returns a subset of `values`.\n */\nfunction filterByKeys(keys, values) {\n  var filtered = {};\n\n  forEach(keys, function (name) {\n    filtered[name] = values[name];\n  });\n  return filtered;\n}\n\n// like _.indexBy\n// when you know that your index values will be unique, or you want last-one-in to win\nfunction indexBy(array, propName) {\n  var result = {};\n  forEach(array, function(item) {\n    result[item[propName]] = item;\n  });\n  return result;\n}\n\n// extracted from underscore.js\n// Return a copy of the object only containing the whitelisted properties.\nfunction pick(obj) {\n  var copy = {};\n  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));\n  forEach(keys, function(key) {\n    if (key in obj) copy[key] = obj[key];\n  });\n  return copy;\n}\n\n// extracted from underscore.js\n// Return a copy of the object omitting the blacklisted properties.\nfunction omit(obj) {\n  var copy = {};\n  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));\n  for (var key in obj) {\n    if (indexOf(keys, key) == -1) copy[key] = obj[key];\n  }\n  return copy;\n}\n\nfunction pluck(collection, key) {\n  var result = isArray(collection) ? [] : {};\n\n  forEach(collection, function(val, i) {\n    result[i] = isFunction(key) ? key(val) : val[key];\n  });\n  return result;\n}\n\nfunction filter(collection, callback) {\n  var array = isArray(collection);\n  var result = array ? [] : {};\n  forEach(collection, function(val, i) {\n    if (callback(val, i)) {\n      result[array ? result.length : i] = val;\n    }\n  });\n  return result;\n}\n\nfunction map(collection, callback) {\n  var result = isArray(collection) ? [] : {};\n\n  forEach(collection, function(val, i) {\n    result[i] = callback(val, i);\n  });\n  return result;\n}\n\n/**\n * @ngdoc overview\n * @name ui.router.util\n *\n * @description\n * # ui.router.util sub-module\n *\n * This module is a dependency of other sub-modules. Do not include this module as a dependency\n * in your angular app (use {@link ui.router} module instead).\n *\n */\nangular.module('ui.router.util', ['ng']);\n\n/**\n * @ngdoc overview\n * @name ui.router.router\n * \n * @requires ui.router.util\n *\n * @description\n * # ui.router.router sub-module\n *\n * This module is a dependency of other sub-modules. Do not include this module as a dependency\n * in your angular app (use {@link ui.router} module instead).\n */\nangular.module('ui.router.router', ['ui.router.util']);\n\n/**\n * @ngdoc overview\n * @name ui.router.state\n * \n * @requires ui.router.router\n * @requires ui.router.util\n *\n * @description\n * # ui.router.state sub-module\n *\n * This module is a dependency of the main ui.router module. Do not include this module as a dependency\n * in your angular app (use {@link ui.router} module instead).\n * \n */\nangular.module('ui.router.state', ['ui.router.router', 'ui.router.util']);\n\n/**\n * @ngdoc overview\n * @name ui.router\n *\n * @requires ui.router.state\n *\n * @description\n * # ui.router\n * \n * ## The main module for ui.router \n * There are several sub-modules included with the ui.router module, however only this module is needed\n * as a dependency within your angular app. The other modules are for organization purposes. \n *\n * The modules are:\n * * ui.router - the main \"umbrella\" module\n * * ui.router.router - \n * \n * *You'll need to include **only** this module as the dependency within your angular app.*\n * \n * <pre>\n * <!doctype html>\n * <html ng-app=\"myApp\">\n * <head>\n *   <script src=\"js/angular.js\"></script>\n *   <!-- Include the ui-router script -->\n *   <script src=\"js/angular-ui-router.min.js\"></script>\n *   <script>\n *     // ...and add 'ui.router' as a dependency\n *     var myApp = angular.module('myApp', ['ui.router']);\n *   </script>\n * </head>\n * <body>\n * </body>\n * </html>\n * </pre>\n */\nangular.module('ui.router', ['ui.router.state']);\n\nangular.module('ui.router.compat', ['ui.router']);\n\n/**\n * @ngdoc object\n * @name ui.router.util.$resolve\n *\n * @requires $q\n * @requires $injector\n *\n * @description\n * Manages resolution of (acyclic) graphs of promises.\n */\n$Resolve.$inject = ['$q', '$injector'];\nfunction $Resolve(  $q,    $injector) {\n  \n  var VISIT_IN_PROGRESS = 1,\n      VISIT_DONE = 2,\n      NOTHING = {},\n      NO_DEPENDENCIES = [],\n      NO_LOCALS = NOTHING,\n      NO_PARENT = extend($q.when(NOTHING), { $$promises: NOTHING, $$values: NOTHING });\n  \n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$resolve#study\n   * @methodOf ui.router.util.$resolve\n   *\n   * @description\n   * Studies a set of invocables that are likely to be used multiple times.\n   * <pre>\n   * $resolve.study(invocables)(locals, parent, self)\n   * </pre>\n   * is equivalent to\n   * <pre>\n   * $resolve.resolve(invocables, locals, parent, self)\n   * </pre>\n   * but the former is more efficient (in fact `resolve` just calls `study` \n   * internally).\n   *\n   * @param {object} invocables Invocable objects\n   * @return {function} a function to pass in locals, parent and self\n   */\n  this.study = function (invocables) {\n    if (!isObject(invocables)) throw new Error(\"'invocables' must be an object\");\n    var invocableKeys = objectKeys(invocables || {});\n    \n    // Perform a topological sort of invocables to build an ordered plan\n    var plan = [], cycle = [], visited = {};\n    function visit(value, key) {\n      if (visited[key] === VISIT_DONE) return;\n      \n      cycle.push(key);\n      if (visited[key] === VISIT_IN_PROGRESS) {\n        cycle.splice(0, indexOf(cycle, key));\n        throw new Error(\"Cyclic dependency: \" + cycle.join(\" -> \"));\n      }\n      visited[key] = VISIT_IN_PROGRESS;\n      \n      if (isString(value)) {\n        plan.push(key, [ function() { return $injector.get(value); }], NO_DEPENDENCIES);\n      } else {\n        var params = $injector.annotate(value);\n        forEach(params, function (param) {\n          if (param !== key && invocables.hasOwnProperty(param)) visit(invocables[param], param);\n        });\n        plan.push(key, value, params);\n      }\n      \n      cycle.pop();\n      visited[key] = VISIT_DONE;\n    }\n    forEach(invocables, visit);\n    invocables = cycle = visited = null; // plan is all that's required\n    \n    function isResolve(value) {\n      return isObject(value) && value.then && value.$$promises;\n    }\n    \n    return function (locals, parent, self) {\n      if (isResolve(locals) && self === undefined) {\n        self = parent; parent = locals; locals = null;\n      }\n      if (!locals) locals = NO_LOCALS;\n      else if (!isObject(locals)) {\n        throw new Error(\"'locals' must be an object\");\n      }       \n      if (!parent) parent = NO_PARENT;\n      else if (!isResolve(parent)) {\n        throw new Error(\"'parent' must be a promise returned by $resolve.resolve()\");\n      }\n      \n      // To complete the overall resolution, we have to wait for the parent\n      // promise and for the promise for each invokable in our plan.\n      var resolution = $q.defer(),\n          result = resolution.promise,\n          promises = result.$$promises = {},\n          values = extend({}, locals),\n          wait = 1 + plan.length/3,\n          merged = false;\n          \n      function done() {\n        // Merge parent values we haven't got yet and publish our own $$values\n        if (!--wait) {\n          if (!merged) merge(values, parent.$$values); \n          result.$$values = values;\n          result.$$promises = result.$$promises || true; // keep for isResolve()\n          delete result.$$inheritedValues;\n          resolution.resolve(values);\n        }\n      }\n      \n      function fail(reason) {\n        result.$$failure = reason;\n        resolution.reject(reason);\n      }\n\n      // Short-circuit if parent has already failed\n      if (isDefined(parent.$$failure)) {\n        fail(parent.$$failure);\n        return result;\n      }\n      \n      if (parent.$$inheritedValues) {\n        merge(values, omit(parent.$$inheritedValues, invocableKeys));\n      }\n\n      // Merge parent values if the parent has already resolved, or merge\n      // parent promises and wait if the parent resolve is still in progress.\n      extend(promises, parent.$$promises);\n      if (parent.$$values) {\n        merged = merge(values, omit(parent.$$values, invocableKeys));\n        result.$$inheritedValues = omit(parent.$$values, invocableKeys);\n        done();\n      } else {\n        if (parent.$$inheritedValues) {\n          result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys);\n        }        \n        parent.then(done, fail);\n      }\n      \n      // Process each invocable in the plan, but ignore any where a local of the same name exists.\n      for (var i=0, ii=plan.length; i<ii; i+=3) {\n        if (locals.hasOwnProperty(plan[i])) done();\n        else invoke(plan[i], plan[i+1], plan[i+2]);\n      }\n      \n      function invoke(key, invocable, params) {\n        // Create a deferred for this invocation. Failures will propagate to the resolution as well.\n        var invocation = $q.defer(), waitParams = 0;\n        function onfailure(reason) {\n          invocation.reject(reason);\n          fail(reason);\n        }\n        // Wait for any parameter that we have a promise for (either from parent or from this\n        // resolve; in that case study() will have made sure it's ordered before us in the plan).\n        forEach(params, function (dep) {\n          if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {\n            waitParams++;\n            promises[dep].then(function (result) {\n              values[dep] = result;\n              if (!(--waitParams)) proceed();\n            }, onfailure);\n          }\n        });\n        if (!waitParams) proceed();\n        function proceed() {\n          if (isDefined(result.$$failure)) return;\n          try {\n            invocation.resolve($injector.invoke(invocable, self, values));\n            invocation.promise.then(function (result) {\n              values[key] = result;\n              done();\n            }, onfailure);\n          } catch (e) {\n            onfailure(e);\n          }\n        }\n        // Publish promise synchronously; invocations further down in the plan may depend on it.\n        promises[key] = invocation.promise;\n      }\n      \n      return result;\n    };\n  };\n  \n  /**\n   * @ngdoc function\n   * @name ui.router.util.$resolve#resolve\n   * @methodOf ui.router.util.$resolve\n   *\n   * @description\n   * Resolves a set of invocables. An invocable is a function to be invoked via \n   * `$injector.invoke()`, and can have an arbitrary number of dependencies. \n   * An invocable can either return a value directly,\n   * or a `$q` promise. If a promise is returned it will be resolved and the \n   * resulting value will be used instead. Dependencies of invocables are resolved \n   * (in this order of precedence)\n   *\n   * - from the specified `locals`\n   * - from another invocable that is part of this `$resolve` call\n   * - from an invocable that is inherited from a `parent` call to `$resolve` \n   *   (or recursively\n   * - from any ancestor `$resolve` of that parent).\n   *\n   * The return value of `$resolve` is a promise for an object that contains \n   * (in this order of precedence)\n   *\n   * - any `locals` (if specified)\n   * - the resolved return values of all injectables\n   * - any values inherited from a `parent` call to `$resolve` (if specified)\n   *\n   * The promise will resolve after the `parent` promise (if any) and all promises \n   * returned by injectables have been resolved. If any invocable \n   * (or `$injector.invoke`) throws an exception, or if a promise returned by an \n   * invocable is rejected, the `$resolve` promise is immediately rejected with the \n   * same error. A rejection of a `parent` promise (if specified) will likewise be \n   * propagated immediately. Once the `$resolve` promise has been rejected, no \n   * further invocables will be called.\n   * \n   * Cyclic dependencies between invocables are not permitted and will caues `$resolve`\n   * to throw an error. As a special case, an injectable can depend on a parameter \n   * with the same name as the injectable, which will be fulfilled from the `parent` \n   * injectable of the same name. This allows inherited values to be decorated. \n   * Note that in this case any other injectable in the same `$resolve` with the same\n   * dependency would see the decorated value, not the inherited value.\n   *\n   * Note that missing dependencies -- unlike cyclic dependencies -- will cause an \n   * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous) \n   * exception.\n   *\n   * Invocables are invoked eagerly as soon as all dependencies are available. \n   * This is true even for dependencies inherited from a `parent` call to `$resolve`.\n   *\n   * As a special case, an invocable can be a string, in which case it is taken to \n   * be a service name to be passed to `$injector.get()`. This is supported primarily \n   * for backwards-compatibility with the `resolve` property of `$routeProvider` \n   * routes.\n   *\n   * @param {object} invocables functions to invoke or \n   * `$injector` services to fetch.\n   * @param {object} locals  values to make available to the injectables\n   * @param {object} parent  a promise returned by another call to `$resolve`.\n   * @param {object} self  the `this` for the invoked methods\n   * @return {object} Promise for an object that contains the resolved return value\n   * of all invocables, as well as any inherited and local values.\n   */\n  this.resolve = function (invocables, locals, parent, self) {\n    return this.study(invocables)(locals, parent, self);\n  };\n}\n\nangular.module('ui.router.util').service('$resolve', $Resolve);\n\n\n/**\n * @ngdoc object\n * @name ui.router.util.$templateFactory\n *\n * @requires $http\n * @requires $templateCache\n * @requires $injector\n *\n * @description\n * Service. Manages loading of templates.\n */\n$TemplateFactory.$inject = ['$http', '$templateCache', '$injector'];\nfunction $TemplateFactory(  $http,   $templateCache,   $injector) {\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$templateFactory#fromConfig\n   * @methodOf ui.router.util.$templateFactory\n   *\n   * @description\n   * Creates a template from a configuration object. \n   *\n   * @param {object} config Configuration object for which to load a template. \n   * The following properties are search in the specified order, and the first one \n   * that is defined is used to create the template:\n   *\n   * @param {string|object} config.template html string template or function to \n   * load via {@link ui.router.util.$templateFactory#fromString fromString}.\n   * @param {string|object} config.templateUrl url to load or a function returning \n   * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.\n   * @param {Function} config.templateProvider function to invoke via \n   * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.\n   * @param {object} params  Parameters to pass to the template function.\n   * @param {object} locals Locals to pass to `invoke` if the template is loaded \n   * via a `templateProvider`. Defaults to `{ params: params }`.\n   *\n   * @return {string|object}  The template html as a string, or a promise for \n   * that string,or `null` if no template is configured.\n   */\n  this.fromConfig = function (config, params, locals) {\n    return (\n      isDefined(config.template) ? this.fromString(config.template, params) :\n      isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :\n      isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) :\n      null\n    );\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$templateFactory#fromString\n   * @methodOf ui.router.util.$templateFactory\n   *\n   * @description\n   * Creates a template from a string or a function returning a string.\n   *\n   * @param {string|object} template html template as a string or function that \n   * returns an html template as a string.\n   * @param {object} params Parameters to pass to the template function.\n   *\n   * @return {string|object} The template html as a string, or a promise for that \n   * string.\n   */\n  this.fromString = function (template, params) {\n    return isFunction(template) ? template(params) : template;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$templateFactory#fromUrl\n   * @methodOf ui.router.util.$templateFactory\n   * \n   * @description\n   * Loads a template from the a URL via `$http` and `$templateCache`.\n   *\n   * @param {string|Function} url url of the template to load, or a function \n   * that returns a url.\n   * @param {Object} params Parameters to pass to the url function.\n   * @return {string|Promise.<string>} The template html as a string, or a promise \n   * for that string.\n   */\n  this.fromUrl = function (url, params) {\n    if (isFunction(url)) url = url(params);\n    if (url == null) return null;\n    else return $http\n        .get(url, { cache: $templateCache, headers: { Accept: 'text/html' }})\n        .then(function(response) { return response.data; });\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$templateFactory#fromProvider\n   * @methodOf ui.router.util.$templateFactory\n   *\n   * @description\n   * Creates a template by invoking an injectable provider function.\n   *\n   * @param {Function} provider Function to invoke via `$injector.invoke`\n   * @param {Object} params Parameters for the template.\n   * @param {Object} locals Locals to pass to `invoke`. Defaults to \n   * `{ params: params }`.\n   * @return {string|Promise.<string>} The template html as a string, or a promise \n   * for that string.\n   */\n  this.fromProvider = function (provider, params, locals) {\n    return $injector.invoke(provider, null, locals || { params: params });\n  };\n}\n\nangular.module('ui.router.util').service('$templateFactory', $TemplateFactory);\n\nvar $$UMFP; // reference to $UrlMatcherFactoryProvider\n\n/**\n * @ngdoc object\n * @name ui.router.util.type:UrlMatcher\n *\n * @description\n * Matches URLs against patterns and extracts named parameters from the path or the search\n * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list\n * of search parameters. Multiple search parameter names are separated by '&'. Search parameters\n * do not influence whether or not a URL is matched, but their values are passed through into\n * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.\n *\n * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace\n * syntax, which optionally allows a regular expression for the parameter to be specified:\n *\n * * `':'` name - colon placeholder\n * * `'*'` name - catch-all placeholder\n * * `'{' name '}'` - curly placeholder\n * * `'{' name ':' regexp|type '}'` - curly placeholder with regexp or type name. Should the\n *   regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\n *\n * Parameter names may contain only word characters (latin letters, digits, and underscore) and\n * must be unique within the pattern (across both path and search parameters). For colon\n * placeholders or curly placeholders without an explicit regexp, a path parameter matches any\n * number of characters other than '/'. For catch-all placeholders the path parameter matches\n * any number of characters.\n *\n * Examples:\n *\n * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\n *   trailing slashes, and patterns have to match the entire path, not just a prefix.\n * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\n *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\n * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\n * * `'/user/{id:[^/]*}'` - Same as the previous example.\n * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\n *   parameter consists of 1 to 8 hex digits.\n * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\n *   path into the parameter 'path'.\n * * `'/files/*path'` - ditto.\n * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\n *   in the built-in  `date` Type matches `2014-11-12`) and provides a Date object in $stateParams.start\n *\n * @param {string} pattern  The pattern to compile into a matcher.\n * @param {Object} config  A configuration object hash:\n * @param {Object=} parentMatcher Used to concatenate the pattern/config onto\n *   an existing UrlMatcher\n *\n * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.\n * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.\n *\n * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any\n *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns\n *   non-null) will start with this prefix.\n *\n * @property {string} source  The pattern that was passed into the constructor\n *\n * @property {string} sourcePath  The path portion of the source property\n *\n * @property {string} sourceSearch  The search portion of the source property\n *\n * @property {string} regex  The constructed regex that will be used to match against the url when\n *   it is time to determine which url will match.\n *\n * @returns {Object}  New `UrlMatcher` object\n */\nfunction UrlMatcher(pattern, config, parentMatcher) {\n  config = extend({ params: {} }, isObject(config) ? config : {});\n\n  // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\n  //   '*' name\n  //   ':' name\n  //   '{' name '}'\n  //   '{' name ':' regexp '}'\n  // The regular expression is somewhat complicated due to the need to allow curly braces\n  // inside the regular expression. The placeholder regexp breaks down as follows:\n  //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\n  //    \\{([\\w\\[\\]]+)(?:\\:( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\n  //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\n  //    [^{}\\\\]+                       - anything other than curly braces or backslash\n  //    \\\\.                            - a backslash escape\n  //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\n  var placeholder       = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,\n      searchPlaceholder = /([:]?)([\\w\\[\\]-]+)|\\{([\\w\\[\\]-]+)(?:\\:((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,\n      compiled = '^', last = 0, m,\n      segments = this.segments = [],\n      parentParams = parentMatcher ? parentMatcher.params : {},\n      params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(),\n      paramNames = [];\n\n  function addParameter(id, type, config, location) {\n    paramNames.push(id);\n    if (parentParams[id]) return parentParams[id];\n    if (!/^\\w+(-+\\w+)*(?:\\[\\])?$/.test(id)) throw new Error(\"Invalid parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n    if (params[id]) throw new Error(\"Duplicate parameter name '\" + id + \"' in pattern '\" + pattern + \"'\");\n    params[id] = new $$UMFP.Param(id, type, config, location);\n    return params[id];\n  }\n\n  function quoteRegExp(string, pattern, squash, optional) {\n    var surroundPattern = ['',''], result = string.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, \"\\\\$&\");\n    if (!pattern) return result;\n    switch(squash) {\n      case false: surroundPattern = ['(', ')' + (optional ? \"?\" : \"\")]; break;\n      case true:  surroundPattern = ['?(', ')?']; break;\n      default:    surroundPattern = ['(' + squash + \"|\", ')?']; break;\n    }\n    return result + surroundPattern[0] + pattern + surroundPattern[1];\n  }\n\n  this.source = pattern;\n\n  // Split into static segments separated by path parameter placeholders.\n  // The number of segments is always 1 more than the number of parameters.\n  function matchDetails(m, isSearch) {\n    var id, regexp, segment, type, cfg, arrayMode;\n    id          = m[2] || m[3]; // IE[78] returns '' for unmatched groups instead of null\n    cfg         = config.params[id];\n    segment     = pattern.substring(last, m.index);\n    regexp      = isSearch ? m[4] : m[4] || (m[1] == '*' ? '.*' : null);\n    type        = $$UMFP.type(regexp || \"string\") || inherit($$UMFP.type(\"string\"), { pattern: new RegExp(regexp, config.caseInsensitive ? 'i' : undefined) });\n    return {\n      id: id, regexp: regexp, segment: segment, type: type, cfg: cfg\n    };\n  }\n\n  var p, param, segment;\n  while ((m = placeholder.exec(pattern))) {\n    p = matchDetails(m, false);\n    if (p.segment.indexOf('?') >= 0) break; // we're into the search part\n\n    param = addParameter(p.id, p.type, p.cfg, \"path\");\n    compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash, param.isOptional);\n    segments.push(p.segment);\n    last = placeholder.lastIndex;\n  }\n  segment = pattern.substring(last);\n\n  // Find any search parameter names and remove them from the last segment\n  var i = segment.indexOf('?');\n\n  if (i >= 0) {\n    var search = this.sourceSearch = segment.substring(i);\n    segment = segment.substring(0, i);\n    this.sourcePath = pattern.substring(0, last + i);\n\n    if (search.length > 0) {\n      last = 0;\n      while ((m = searchPlaceholder.exec(search))) {\n        p = matchDetails(m, true);\n        param = addParameter(p.id, p.type, p.cfg, \"search\");\n        last = placeholder.lastIndex;\n        // check if ?&\n      }\n    }\n  } else {\n    this.sourcePath = pattern;\n    this.sourceSearch = '';\n  }\n\n  compiled += quoteRegExp(segment) + (config.strict === false ? '\\/?' : '') + '$';\n  segments.push(segment);\n\n  this.regexp = new RegExp(compiled, config.caseInsensitive ? 'i' : undefined);\n  this.prefix = segments[0];\n  this.$$paramNames = paramNames;\n}\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:UrlMatcher#concat\n * @methodOf ui.router.util.type:UrlMatcher\n *\n * @description\n * Returns a new matcher for a pattern constructed by appending the path part and adding the\n * search parameters of the specified pattern to this pattern. The current pattern is not\n * modified. This can be understood as creating a pattern for URLs that are relative to (or\n * suffixes of) the current pattern.\n *\n * @example\n * The following two matchers are equivalent:\n * <pre>\n * new UrlMatcher('/user/{id}?q').concat('/details?date');\n * new UrlMatcher('/user/{id}/details?q&date');\n * </pre>\n *\n * @param {string} pattern  The pattern to append.\n * @param {Object} config  An object hash of the configuration for the matcher.\n * @returns {UrlMatcher}  A matcher for the concatenated pattern.\n */\nUrlMatcher.prototype.concat = function (pattern, config) {\n  // Because order of search parameters is irrelevant, we can add our own search\n  // parameters to the end of the new pattern. Parse the new pattern by itself\n  // and then join the bits together, but it's much easier to do this on a string level.\n  var defaultConfig = {\n    caseInsensitive: $$UMFP.caseInsensitive(),\n    strict: $$UMFP.strictMode(),\n    squash: $$UMFP.defaultSquashPolicy()\n  };\n  return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);\n};\n\nUrlMatcher.prototype.toString = function () {\n  return this.source;\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:UrlMatcher#exec\n * @methodOf ui.router.util.type:UrlMatcher\n *\n * @description\n * Tests the specified path against this matcher, and returns an object containing the captured\n * parameter values, or null if the path does not match. The returned object contains the values\n * of any search parameters that are mentioned in the pattern, but their value may be null if\n * they are not present in `searchParams`. This means that search parameters are always treated\n * as optional.\n *\n * @example\n * <pre>\n * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\n *   x: '1', q: 'hello'\n * });\n * // returns { id: 'bob', q: 'hello', r: null }\n * </pre>\n *\n * @param {string} path  The URL path to match, e.g. `$location.path()`.\n * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.\n * @returns {Object}  The captured parameter values.\n */\nUrlMatcher.prototype.exec = function (path, searchParams) {\n  var m = this.regexp.exec(path);\n  if (!m) return null;\n  searchParams = searchParams || {};\n\n  var paramNames = this.parameters(), nTotal = paramNames.length,\n    nPath = this.segments.length - 1,\n    values = {}, i, j, cfg, paramName;\n\n  if (nPath !== m.length - 1) throw new Error(\"Unbalanced capture group in route '\" + this.source + \"'\");\n\n  function decodePathArray(string) {\n    function reverseString(str) { return str.split(\"\").reverse().join(\"\"); }\n    function unquoteDashes(str) { return str.replace(/\\\\-/g, \"-\"); }\n\n    var split = reverseString(string).split(/-(?!\\\\)/);\n    var allReversed = map(split, reverseString);\n    return map(allReversed, unquoteDashes).reverse();\n  }\n\n  for (i = 0; i < nPath; i++) {\n    paramName = paramNames[i];\n    var param = this.params[paramName];\n    var paramVal = m[i+1];\n    // if the param value matches a pre-replace pair, replace the value before decoding.\n    for (j = 0; j < param.replace; j++) {\n      if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;\n    }\n    if (paramVal && param.array === true) paramVal = decodePathArray(paramVal);\n    values[paramName] = param.value(paramVal);\n  }\n  for (/**/; i < nTotal; i++) {\n    paramName = paramNames[i];\n    values[paramName] = this.params[paramName].value(searchParams[paramName]);\n  }\n\n  return values;\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:UrlMatcher#parameters\n * @methodOf ui.router.util.type:UrlMatcher\n *\n * @description\n * Returns the names of all path and search parameters of this pattern in an unspecified order.\n *\n * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the\n *    pattern has no parameters, an empty array is returned.\n */\nUrlMatcher.prototype.parameters = function (param) {\n  if (!isDefined(param)) return this.$$paramNames;\n  return this.params[param] || null;\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:UrlMatcher#validate\n * @methodOf ui.router.util.type:UrlMatcher\n *\n * @description\n * Checks an object hash of parameters to validate their correctness according to the parameter\n * types of this `UrlMatcher`.\n *\n * @param {Object} params The object hash of parameters to validate.\n * @returns {boolean} Returns `true` if `params` validates, otherwise `false`.\n */\nUrlMatcher.prototype.validates = function (params) {\n  return this.params.$$validates(params);\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:UrlMatcher#format\n * @methodOf ui.router.util.type:UrlMatcher\n *\n * @description\n * Creates a URL that matches this pattern by substituting the specified values\n * for the path and search parameters. Null values for path parameters are\n * treated as empty strings.\n *\n * @example\n * <pre>\n * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\n * // returns '/user/bob?q=yes'\n * </pre>\n *\n * @param {Object} values  the values to substitute for the parameters in this pattern.\n * @returns {string}  the formatted URL (path and optionally search part).\n */\nUrlMatcher.prototype.format = function (values) {\n  values = values || {};\n  var segments = this.segments, params = this.parameters(), paramset = this.params;\n  if (!this.validates(values)) return null;\n\n  var i, search = false, nPath = segments.length - 1, nTotal = params.length, result = segments[0];\n\n  function encodeDashes(str) { // Replace dashes with encoded \"\\-\"\n    return encodeURIComponent(str).replace(/-/g, function(c) { return '%5C%' + c.charCodeAt(0).toString(16).toUpperCase(); });\n  }\n\n  for (i = 0; i < nTotal; i++) {\n    var isPathParam = i < nPath;\n    var name = params[i], param = paramset[name], value = param.value(values[name]);\n    var isDefaultValue = param.isOptional && param.type.equals(param.value(), value);\n    var squash = isDefaultValue ? param.squash : false;\n    var encoded = param.type.encode(value);\n\n    if (isPathParam) {\n      var nextSegment = segments[i + 1];\n      if (squash === false) {\n        if (encoded != null) {\n          if (isArray(encoded)) {\n            result += map(encoded, encodeDashes).join(\"-\");\n          } else {\n            result += encodeURIComponent(encoded);\n          }\n        }\n        result += nextSegment;\n      } else if (squash === true) {\n        var capture = result.match(/\\/$/) ? /\\/?(.*)/ : /(.*)/;\n        result += nextSegment.match(capture)[1];\n      } else if (isString(squash)) {\n        result += squash + nextSegment;\n      }\n    } else {\n      if (encoded == null || (isDefaultValue && squash !== false)) continue;\n      if (!isArray(encoded)) encoded = [ encoded ];\n      encoded = map(encoded, encodeURIComponent).join('&' + name + '=');\n      result += (search ? '&' : '?') + (name + '=' + encoded);\n      search = true;\n    }\n  }\n\n  return result;\n};\n\n/**\n * @ngdoc object\n * @name ui.router.util.type:Type\n *\n * @description\n * Implements an interface to define custom parameter types that can be decoded from and encoded to\n * string parameters matched in a URL. Used by {@link ui.router.util.type:UrlMatcher `UrlMatcher`}\n * objects when matching or formatting URLs, or comparing or validating parameter values.\n *\n * See {@link ui.router.util.$urlMatcherFactory#methods_type `$urlMatcherFactory#type()`} for more\n * information on registering custom types.\n *\n * @param {Object} config  A configuration object which contains the custom type definition.  The object's\n *        properties will override the default methods and/or pattern in `Type`'s public interface.\n * @example\n * <pre>\n * {\n *   decode: function(val) { return parseInt(val, 10); },\n *   encode: function(val) { return val && val.toString(); },\n *   equals: function(a, b) { return this.is(a) && a === b; },\n *   is: function(val) { return angular.isNumber(val) isFinite(val) && val % 1 === 0; },\n *   pattern: /\\d+/\n * }\n * </pre>\n *\n * @property {RegExp} pattern The regular expression pattern used to match values of this type when\n *           coming from a substring of a URL.\n *\n * @returns {Object}  Returns a new `Type` object.\n */\nfunction Type(config) {\n  extend(this, config);\n}\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:Type#is\n * @methodOf ui.router.util.type:Type\n *\n * @description\n * Detects whether a value is of a particular type. Accepts a native (decoded) value\n * and determines whether it matches the current `Type` object.\n *\n * @param {*} val  The value to check.\n * @param {string} key  Optional. If the type check is happening in the context of a specific\n *        {@link ui.router.util.type:UrlMatcher `UrlMatcher`} object, this is the name of the\n *        parameter in which `val` is stored. Can be used for meta-programming of `Type` objects.\n * @returns {Boolean}  Returns `true` if the value matches the type, otherwise `false`.\n */\nType.prototype.is = function(val, key) {\n  return true;\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:Type#encode\n * @methodOf ui.router.util.type:Type\n *\n * @description\n * Encodes a custom/native type value to a string that can be embedded in a URL. Note that the\n * return value does *not* need to be URL-safe (i.e. passed through `encodeURIComponent()`), it\n * only needs to be a representation of `val` that has been coerced to a string.\n *\n * @param {*} val  The value to encode.\n * @param {string} key  The name of the parameter in which `val` is stored. Can be used for\n *        meta-programming of `Type` objects.\n * @returns {string}  Returns a string representation of `val` that can be encoded in a URL.\n */\nType.prototype.encode = function(val, key) {\n  return val;\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:Type#decode\n * @methodOf ui.router.util.type:Type\n *\n * @description\n * Converts a parameter value (from URL string or transition param) to a custom/native value.\n *\n * @param {string} val  The URL parameter value to decode.\n * @param {string} key  The name of the parameter in which `val` is stored. Can be used for\n *        meta-programming of `Type` objects.\n * @returns {*}  Returns a custom representation of the URL parameter value.\n */\nType.prototype.decode = function(val, key) {\n  return val;\n};\n\n/**\n * @ngdoc function\n * @name ui.router.util.type:Type#equals\n * @methodOf ui.router.util.type:Type\n *\n * @description\n * Determines whether two decoded values are equivalent.\n *\n * @param {*} a  A value to compare against.\n * @param {*} b  A value to compare against.\n * @returns {Boolean}  Returns `true` if the values are equivalent/equal, otherwise `false`.\n */\nType.prototype.equals = function(a, b) {\n  return a == b;\n};\n\nType.prototype.$subPattern = function() {\n  var sub = this.pattern.toString();\n  return sub.substr(1, sub.length - 2);\n};\n\nType.prototype.pattern = /.*/;\n\nType.prototype.toString = function() { return \"{Type:\" + this.name + \"}\"; };\n\n/** Given an encoded string, or a decoded object, returns a decoded object */\nType.prototype.$normalize = function(val) {\n  return this.is(val) ? val : this.decode(val);\n};\n\n/*\n * Wraps an existing custom Type as an array of Type, depending on 'mode'.\n * e.g.:\n * - urlmatcher pattern \"/path?{queryParam[]:int}\"\n * - url: \"/path?queryParam=1&queryParam=2\n * - $stateParams.queryParam will be [1, 2]\n * if `mode` is \"auto\", then\n * - url: \"/path?queryParam=1 will create $stateParams.queryParam: 1\n * - url: \"/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]\n */\nType.prototype.$asArray = function(mode, isSearch) {\n  if (!mode) return this;\n  if (mode === \"auto\" && !isSearch) throw new Error(\"'auto' array mode is for query parameters only\");\n\n  function ArrayType(type, mode) {\n    function bindTo(type, callbackName) {\n      return function() {\n        return type[callbackName].apply(type, arguments);\n      };\n    }\n\n    // Wrap non-array value as array\n    function arrayWrap(val) { return isArray(val) ? val : (isDefined(val) ? [ val ] : []); }\n    // Unwrap array value for \"auto\" mode. Return undefined for empty array.\n    function arrayUnwrap(val) {\n      switch(val.length) {\n        case 0: return undefined;\n        case 1: return mode === \"auto\" ? val[0] : val;\n        default: return val;\n      }\n    }\n    function falsey(val) { return !val; }\n\n    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array\n    function arrayHandler(callback, allTruthyMode) {\n      return function handleArray(val) {\n        val = arrayWrap(val);\n        var result = map(val, callback);\n        if (allTruthyMode === true)\n          return filter(result, falsey).length === 0;\n        return arrayUnwrap(result);\n      };\n    }\n\n    // Wraps type (.equals) functions to operate on each value of an array\n    function arrayEqualsHandler(callback) {\n      return function handleArray(val1, val2) {\n        var left = arrayWrap(val1), right = arrayWrap(val2);\n        if (left.length !== right.length) return false;\n        for (var i = 0; i < left.length; i++) {\n          if (!callback(left[i], right[i])) return false;\n        }\n        return true;\n      };\n    }\n\n    this.encode = arrayHandler(bindTo(type, 'encode'));\n    this.decode = arrayHandler(bindTo(type, 'decode'));\n    this.is     = arrayHandler(bindTo(type, 'is'), true);\n    this.equals = arrayEqualsHandler(bindTo(type, 'equals'));\n    this.pattern = type.pattern;\n    this.$normalize = arrayHandler(bindTo(type, '$normalize'));\n    this.name = type.name;\n    this.$arrayMode = mode;\n  }\n\n  return new ArrayType(this, mode);\n};\n\n\n\n/**\n * @ngdoc object\n * @name ui.router.util.$urlMatcherFactory\n *\n * @description\n * Factory for {@link ui.router.util.type:UrlMatcher `UrlMatcher`} instances. The factory\n * is also available to providers under the name `$urlMatcherFactoryProvider`.\n */\nfunction $UrlMatcherFactory() {\n  $$UMFP = this;\n\n  var isCaseInsensitive = false, isStrictMode = true, defaultSquashPolicy = false;\n\n  function valToString(val) { return val != null ? val.toString().replace(/\\//g, \"%2F\") : val; }\n  function valFromString(val) { return val != null ? val.toString().replace(/%2F/g, \"/\") : val; }\n\n  var $types = {}, enqueue = true, typeQueue = [], injector, defaultTypes = {\n    string: {\n      encode: valToString,\n      decode: valFromString,\n      // TODO: in 1.0, make string .is() return false if value is undefined/null by default.\n      // In 0.2.x, string params are optional by default for backwards compat\n      is: function(val) { return val == null || !isDefined(val) || typeof val === \"string\"; },\n      pattern: /[^/]*/\n    },\n    int: {\n      encode: valToString,\n      decode: function(val) { return parseInt(val, 10); },\n      is: function(val) { return isDefined(val) && this.decode(val.toString()) === val; },\n      pattern: /\\d+/\n    },\n    bool: {\n      encode: function(val) { return val ? 1 : 0; },\n      decode: function(val) { return parseInt(val, 10) !== 0; },\n      is: function(val) { return val === true || val === false; },\n      pattern: /0|1/\n    },\n    date: {\n      encode: function (val) {\n        if (!this.is(val))\n          return undefined;\n        return [ val.getFullYear(),\n          ('0' + (val.getMonth() + 1)).slice(-2),\n          ('0' + val.getDate()).slice(-2)\n        ].join(\"-\");\n      },\n      decode: function (val) {\n        if (this.is(val)) return val;\n        var match = this.capture.exec(val);\n        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n      },\n      is: function(val) { return val instanceof Date && !isNaN(val.valueOf()); },\n      equals: function (a, b) { return this.is(a) && this.is(b) && a.toISOString() === b.toISOString(); },\n      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/\n    },\n    json: {\n      encode: angular.toJson,\n      decode: angular.fromJson,\n      is: angular.isObject,\n      equals: angular.equals,\n      pattern: /[^/]*/\n    },\n    any: { // does not encode/decode\n      encode: angular.identity,\n      decode: angular.identity,\n      equals: angular.equals,\n      pattern: /.*/\n    }\n  };\n\n  function getDefaultConfig() {\n    return {\n      strict: isStrictMode,\n      caseInsensitive: isCaseInsensitive\n    };\n  }\n\n  function isInjectable(value) {\n    return (isFunction(value) || (isArray(value) && isFunction(value[value.length - 1])));\n  }\n\n  /**\n   * [Internal] Get the default value of a parameter, which may be an injectable function.\n   */\n  $UrlMatcherFactory.$$getDefaultValue = function(config) {\n    if (!isInjectable(config.value)) return config.value;\n    if (!injector) throw new Error(\"Injectable functions cannot be called at configuration time\");\n    return injector.invoke(config.value);\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$urlMatcherFactory#caseInsensitive\n   * @methodOf ui.router.util.$urlMatcherFactory\n   *\n   * @description\n   * Defines whether URL matching should be case sensitive (the default behavior), or not.\n   *\n   * @param {boolean} value `false` to match URL in a case sensitive manner; otherwise `true`;\n   * @returns {boolean} the current value of caseInsensitive\n   */\n  this.caseInsensitive = function(value) {\n    if (isDefined(value))\n      isCaseInsensitive = value;\n    return isCaseInsensitive;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$urlMatcherFactory#strictMode\n   * @methodOf ui.router.util.$urlMatcherFactory\n   *\n   * @description\n   * Defines whether URLs should match trailing slashes, or not (the default behavior).\n   *\n   * @param {boolean=} value `false` to match trailing slashes in URLs, otherwise `true`.\n   * @returns {boolean} the current value of strictMode\n   */\n  this.strictMode = function(value) {\n    if (isDefined(value))\n      isStrictMode = value;\n    return isStrictMode;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$urlMatcherFactory#defaultSquashPolicy\n   * @methodOf ui.router.util.$urlMatcherFactory\n   *\n   * @description\n   * Sets the default behavior when generating or matching URLs with default parameter values.\n   *\n   * @param {string} value A string that defines the default parameter URL squashing behavior.\n   *    `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL\n   *    `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the\n   *             parameter is surrounded by slashes, squash (remove) one slash from the URL\n   *    any other string, e.g. \"~\": When generating an href with a default parameter value, squash (remove)\n   *             the parameter value from the URL and replace it with this string.\n   */\n  this.defaultSquashPolicy = function(value) {\n    if (!isDefined(value)) return defaultSquashPolicy;\n    if (value !== true && value !== false && !isString(value))\n      throw new Error(\"Invalid squash policy: \" + value + \". Valid policies: false, true, arbitrary-string\");\n    defaultSquashPolicy = value;\n    return value;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$urlMatcherFactory#compile\n   * @methodOf ui.router.util.$urlMatcherFactory\n   *\n   * @description\n   * Creates a {@link ui.router.util.type:UrlMatcher `UrlMatcher`} for the specified pattern.\n   *\n   * @param {string} pattern  The URL pattern.\n   * @param {Object} config  The config object hash.\n   * @returns {UrlMatcher}  The UrlMatcher.\n   */\n  this.compile = function (pattern, config) {\n    return new UrlMatcher(pattern, extend(getDefaultConfig(), config));\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$urlMatcherFactory#isMatcher\n   * @methodOf ui.router.util.$urlMatcherFactory\n   *\n   * @description\n   * Returns true if the specified object is a `UrlMatcher`, or false otherwise.\n   *\n   * @param {Object} object  The object to perform the type check against.\n   * @returns {Boolean}  Returns `true` if the object matches the `UrlMatcher` interface, by\n   *          implementing all the same methods.\n   */\n  this.isMatcher = function (o) {\n    if (!isObject(o)) return false;\n    var result = true;\n\n    forEach(UrlMatcher.prototype, function(val, name) {\n      if (isFunction(val)) {\n        result = result && (isDefined(o[name]) && isFunction(o[name]));\n      }\n    });\n    return result;\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.util.$urlMatcherFactory#type\n   * @methodOf ui.router.util.$urlMatcherFactory\n   *\n   * @description\n   * Registers a custom {@link ui.router.util.type:Type `Type`} object that can be used to\n   * generate URLs with typed parameters.\n   *\n   * @param {string} name  The type name.\n   * @param {Object|Function} definition   The type definition. See\n   *        {@link ui.router.util.type:Type `Type`} for information on the values accepted.\n   * @param {Object|Function} definitionFn (optional) A function that is injected before the app\n   *        runtime starts.  The result of this function is merged into the existing `definition`.\n   *        See {@link ui.router.util.type:Type `Type`} for information on the values accepted.\n   *\n   * @returns {Object}  Returns `$urlMatcherFactoryProvider`.\n   *\n   * @example\n   * This is a simple example of a custom type that encodes and decodes items from an\n   * array, using the array index as the URL-encoded value:\n   *\n   * <pre>\n   * var list = ['John', 'Paul', 'George', 'Ringo'];\n   *\n   * $urlMatcherFactoryProvider.type('listItem', {\n   *   encode: function(item) {\n   *     // Represent the list item in the URL using its corresponding index\n   *     return list.indexOf(item);\n   *   },\n   *   decode: function(item) {\n   *     // Look up the list item by index\n   *     return list[parseInt(item, 10)];\n   *   },\n   *   is: function(item) {\n   *     // Ensure the item is valid by checking to see that it appears\n   *     // in the list\n   *     return list.indexOf(item) > -1;\n   *   }\n   * });\n   *\n   * $stateProvider.state('list', {\n   *   url: \"/list/{item:listItem}\",\n   *   controller: function($scope, $stateParams) {\n   *     console.log($stateParams.item);\n   *   }\n   * });\n   *\n   * // ...\n   *\n   * // Changes URL to '/list/3', logs \"Ringo\" to the console\n   * $state.go('list', { item: \"Ringo\" });\n   * </pre>\n   *\n   * This is a more complex example of a type that relies on dependency injection to\n   * interact with services, and uses the parameter name from the URL to infer how to\n   * handle encoding and decoding parameter values:\n   *\n   * <pre>\n   * // Defines a custom type that gets a value from a service,\n   * // where each service gets different types of values from\n   * // a backend API:\n   * $urlMatcherFactoryProvider.type('dbObject', {}, function(Users, Posts) {\n   *\n   *   // Matches up services to URL parameter names\n   *   var services = {\n   *     user: Users,\n   *     post: Posts\n   *   };\n   *\n   *   return {\n   *     encode: function(object) {\n   *       // Represent the object in the URL using its unique ID\n   *       return object.id;\n   *     },\n   *     decode: function(value, key) {\n   *       // Look up the object by ID, using the parameter\n   *       // name (key) to call the correct service\n   *       return services[key].findById(value);\n   *     },\n   *     is: function(object, key) {\n   *       // Check that object is a valid dbObject\n   *       return angular.isObject(object) && object.id && services[key];\n   *     }\n   *     equals: function(a, b) {\n   *       // Check the equality of decoded objects by comparing\n   *       // their unique IDs\n   *       return a.id === b.id;\n   *     }\n   *   };\n   * });\n   *\n   * // In a config() block, you can then attach URLs with\n   * // type-annotated parameters:\n   * $stateProvider.state('users', {\n   *   url: \"/users\",\n   *   // ...\n   * }).state('users.item', {\n   *   url: \"/{user:dbObject}\",\n   *   controller: function($scope, $stateParams) {\n   *     // $stateParams.user will now be an object returned from\n   *     // the Users service\n   *   },\n   *   // ...\n   * });\n   * </pre>\n   */\n  this.type = function (name, definition, definitionFn) {\n    if (!isDefined(definition)) return $types[name];\n    if ($types.hasOwnProperty(name)) throw new Error(\"A type named '\" + name + \"' has already been defined.\");\n\n    $types[name] = new Type(extend({ name: name }, definition));\n    if (definitionFn) {\n      typeQueue.push({ name: name, def: definitionFn });\n      if (!enqueue) flushTypeQueue();\n    }\n    return this;\n  };\n\n  // `flushTypeQueue()` waits until `$urlMatcherFactory` is injected before invoking the queued `definitionFn`s\n  function flushTypeQueue() {\n    while(typeQueue.length) {\n      var type = typeQueue.shift();\n      if (type.pattern) throw new Error(\"You cannot override a type's .pattern at runtime.\");\n      angular.extend($types[type.name], injector.invoke(type.def));\n    }\n  }\n\n  // Register default types. Store them in the prototype of $types.\n  forEach(defaultTypes, function(type, name) { $types[name] = new Type(extend({name: name}, type)); });\n  $types = inherit($types, {});\n\n  /* No need to document $get, since it returns this */\n  this.$get = ['$injector', function ($injector) {\n    injector = $injector;\n    enqueue = false;\n    flushTypeQueue();\n\n    forEach(defaultTypes, function(type, name) {\n      if (!$types[name]) $types[name] = new Type(type);\n    });\n    return this;\n  }];\n\n  this.Param = function Param(id, type, config, location) {\n    var self = this;\n    config = unwrapShorthand(config);\n    type = getType(config, type, location);\n    var arrayMode = getArrayMode();\n    type = arrayMode ? type.$asArray(arrayMode, location === \"search\") : type;\n    if (type.name === \"string\" && !arrayMode && location === \"path\" && config.value === undefined)\n      config.value = \"\"; // for 0.2.x; in 0.3.0+ do not automatically default to \"\"\n    var isOptional = config.value !== undefined;\n    var squash = getSquashPolicy(config, isOptional);\n    var replace = getReplace(config, arrayMode, isOptional, squash);\n\n    function unwrapShorthand(config) {\n      var keys = isObject(config) ? objectKeys(config) : [];\n      var isShorthand = indexOf(keys, \"value\") === -1 && indexOf(keys, \"type\") === -1 &&\n                        indexOf(keys, \"squash\") === -1 && indexOf(keys, \"array\") === -1;\n      if (isShorthand) config = { value: config };\n      config.$$fn = isInjectable(config.value) ? config.value : function () { return config.value; };\n      return config;\n    }\n\n    function getType(config, urlType, location) {\n      if (config.type && urlType) throw new Error(\"Param '\"+id+\"' has two type configurations.\");\n      if (urlType) return urlType;\n      if (!config.type) return (location === \"config\" ? $types.any : $types.string);\n      return config.type instanceof Type ? config.type : new Type(config.type);\n    }\n\n    // array config: param name (param[]) overrides default settings.  explicit config overrides param name.\n    function getArrayMode() {\n      var arrayDefaults = { array: (location === \"search\" ? \"auto\" : false) };\n      var arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};\n      return extend(arrayDefaults, arrayParamNomenclature, config).array;\n    }\n\n    /**\n     * returns false, true, or the squash value to indicate the \"default parameter url squash policy\".\n     */\n    function getSquashPolicy(config, isOptional) {\n      var squash = config.squash;\n      if (!isOptional || squash === false) return false;\n      if (!isDefined(squash) || squash == null) return defaultSquashPolicy;\n      if (squash === true || isString(squash)) return squash;\n      throw new Error(\"Invalid squash policy: '\" + squash + \"'. Valid policies: false, true, or arbitrary string\");\n    }\n\n    function getReplace(config, arrayMode, isOptional, squash) {\n      var replace, configuredKeys, defaultPolicy = [\n        { from: \"\",   to: (isOptional || arrayMode ? undefined : \"\") },\n        { from: null, to: (isOptional || arrayMode ? undefined : \"\") }\n      ];\n      replace = isArray(config.replace) ? config.replace : [];\n      if (isString(squash))\n        replace.push({ from: squash, to: undefined });\n      configuredKeys = map(replace, function(item) { return item.from; } );\n      return filter(defaultPolicy, function(item) { return indexOf(configuredKeys, item.from) === -1; }).concat(replace);\n    }\n\n    /**\n     * [Internal] Get the default value of a parameter, which may be an injectable function.\n     */\n    function $$getDefaultValue() {\n      if (!injector) throw new Error(\"Injectable functions cannot be called at configuration time\");\n      var defaultValue = injector.invoke(config.$$fn);\n      if (defaultValue !== null && defaultValue !== undefined && !self.type.is(defaultValue))\n        throw new Error(\"Default value (\" + defaultValue + \") for parameter '\" + self.id + \"' is not an instance of Type (\" + self.type.name + \")\");\n      return defaultValue;\n    }\n\n    /**\n     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the\n     * default value, which may be the result of an injectable function.\n     */\n    function $value(value) {\n      function hasReplaceVal(val) { return function(obj) { return obj.from === val; }; }\n      function $replace(value) {\n        var replacement = map(filter(self.replace, hasReplaceVal(value)), function(obj) { return obj.to; });\n        return replacement.length ? replacement[0] : value;\n      }\n      value = $replace(value);\n      return !isDefined(value) ? $$getDefaultValue() : self.type.$normalize(value);\n    }\n\n    function toString() { return \"{Param:\" + id + \" \" + type + \" squash: '\" + squash + \"' optional: \" + isOptional + \"}\"; }\n\n    extend(this, {\n      id: id,\n      type: type,\n      location: location,\n      array: arrayMode,\n      squash: squash,\n      replace: replace,\n      isOptional: isOptional,\n      value: $value,\n      dynamic: undefined,\n      config: config,\n      toString: toString\n    });\n  };\n\n  function ParamSet(params) {\n    extend(this, params || {});\n  }\n\n  ParamSet.prototype = {\n    $$new: function() {\n      return inherit(this, extend(new ParamSet(), { $$parent: this}));\n    },\n    $$keys: function () {\n      var keys = [], chain = [], parent = this,\n        ignore = objectKeys(ParamSet.prototype);\n      while (parent) { chain.push(parent); parent = parent.$$parent; }\n      chain.reverse();\n      forEach(chain, function(paramset) {\n        forEach(objectKeys(paramset), function(key) {\n            if (indexOf(keys, key) === -1 && indexOf(ignore, key) === -1) keys.push(key);\n        });\n      });\n      return keys;\n    },\n    $$values: function(paramValues) {\n      var values = {}, self = this;\n      forEach(self.$$keys(), function(key) {\n        values[key] = self[key].value(paramValues && paramValues[key]);\n      });\n      return values;\n    },\n    $$equals: function(paramValues1, paramValues2) {\n      var equal = true, self = this;\n      forEach(self.$$keys(), function(key) {\n        var left = paramValues1 && paramValues1[key], right = paramValues2 && paramValues2[key];\n        if (!self[key].type.equals(left, right)) equal = false;\n      });\n      return equal;\n    },\n    $$validates: function $$validate(paramValues) {\n      var keys = this.$$keys(), i, param, rawVal, normalized, encoded;\n      for (i = 0; i < keys.length; i++) {\n        param = this[keys[i]];\n        rawVal = paramValues[keys[i]];\n        if ((rawVal === undefined || rawVal === null) && param.isOptional)\n          break; // There was no parameter value, but the param is optional\n        normalized = param.type.$normalize(rawVal);\n        if (!param.type.is(normalized))\n          return false; // The value was not of the correct Type, and could not be decoded to the correct Type\n        encoded = param.type.encode(normalized);\n        if (angular.isString(encoded) && !param.type.pattern.exec(encoded))\n          return false; // The value was of the correct type, but when encoded, did not match the Type's regexp\n      }\n      return true;\n    },\n    $$parent: undefined\n  };\n\n  this.ParamSet = ParamSet;\n}\n\n// Register as a provider so it's available to other providers\nangular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);\nangular.module('ui.router.util').run(['$urlMatcherFactory', function($urlMatcherFactory) { }]);\n\n/**\n * @ngdoc object\n * @name ui.router.router.$urlRouterProvider\n *\n * @requires ui.router.util.$urlMatcherFactoryProvider\n * @requires $locationProvider\n *\n * @description\n * `$urlRouterProvider` has the responsibility of watching `$location`. \n * When `$location` changes it runs through a list of rules one by one until a \n * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify \n * a url in a state configuration. All urls are compiled into a UrlMatcher object.\n *\n * There are several methods on `$urlRouterProvider` that make it useful to use directly\n * in your module config.\n */\n$UrlRouterProvider.$inject = ['$locationProvider', '$urlMatcherFactoryProvider'];\nfunction $UrlRouterProvider(   $locationProvider,   $urlMatcherFactory) {\n  var rules = [], otherwise = null, interceptDeferred = false, listener;\n\n  // Returns a string that is a prefix of all strings matching the RegExp\n  function regExpPrefix(re) {\n    var prefix = /^\\^((?:\\\\[^a-zA-Z0-9]|[^\\\\\\[\\]\\^$*+?.()|{}]+)*)/.exec(re.source);\n    return (prefix != null) ? prefix[1].replace(/\\\\(.)/g, \"$1\") : '';\n  }\n\n  // Interpolates matched values into a String.replace()-style pattern\n  function interpolate(pattern, match) {\n    return pattern.replace(/\\$(\\$|\\d{1,2})/, function (m, what) {\n      return match[what === '$' ? 0 : Number(what)];\n    });\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.router.$urlRouterProvider#rule\n   * @methodOf ui.router.router.$urlRouterProvider\n   *\n   * @description\n   * Defines rules that are used by `$urlRouterProvider` to find matches for\n   * specific URLs.\n   *\n   * @example\n   * <pre>\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   // Here's an example of how you might allow case insensitive urls\n   *   $urlRouterProvider.rule(function ($injector, $location) {\n   *     var path = $location.path(),\n   *         normalized = path.toLowerCase();\n   *\n   *     if (path !== normalized) {\n   *       return normalized;\n   *     }\n   *   });\n   * });\n   * </pre>\n   *\n   * @param {object} rule Handler function that takes `$injector` and `$location`\n   * services as arguments. You can use them to return a valid path as a string.\n   *\n   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\n   */\n  this.rule = function (rule) {\n    if (!isFunction(rule)) throw new Error(\"'rule' must be a function\");\n    rules.push(rule);\n    return this;\n  };\n\n  /**\n   * @ngdoc object\n   * @name ui.router.router.$urlRouterProvider#otherwise\n   * @methodOf ui.router.router.$urlRouterProvider\n   *\n   * @description\n   * Defines a path that is used when an invalid route is requested.\n   *\n   * @example\n   * <pre>\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   // if the path doesn't match any of the urls you configured\n   *   // otherwise will take care of routing the user to the\n   *   // specified url\n   *   $urlRouterProvider.otherwise('/index');\n   *\n   *   // Example of using function rule as param\n   *   $urlRouterProvider.otherwise(function ($injector, $location) {\n   *     return '/a/valid/url';\n   *   });\n   * });\n   * </pre>\n   *\n   * @param {string|object} rule The url path you want to redirect to or a function \n   * rule that returns the url path. The function version is passed two params: \n   * `$injector` and `$location` services, and must return a url string.\n   *\n   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance\n   */\n  this.otherwise = function (rule) {\n    if (isString(rule)) {\n      var redirect = rule;\n      rule = function () { return redirect; };\n    }\n    else if (!isFunction(rule)) throw new Error(\"'rule' must be a function\");\n    otherwise = rule;\n    return this;\n  };\n\n\n  function handleIfMatch($injector, handler, match) {\n    if (!match) return false;\n    var result = $injector.invoke(handler, handler, { $match: match });\n    return isDefined(result) ? result : true;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.router.$urlRouterProvider#when\n   * @methodOf ui.router.router.$urlRouterProvider\n   *\n   * @description\n   * Registers a handler for a given url matching. if handle is a string, it is\n   * treated as a redirect, and is interpolated according to the syntax of match\n   * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).\n   *\n   * If the handler is a function, it is injectable. It gets invoked if `$location`\n   * matches. You have the option of inject the match object as `$match`.\n   *\n   * The handler can return\n   *\n   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`\n   *   will continue trying to find another one that matches.\n   * - **string** which is treated as a redirect and passed to `$location.url()`\n   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.\n   *\n   * @example\n   * <pre>\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {\n   *     if ($state.$current.navigable !== state ||\n   *         !equalForKeys($match, $stateParams) {\n   *      $state.transitionTo(state, $match, false);\n   *     }\n   *   });\n   * });\n   * </pre>\n   *\n   * @param {string|object} what The incoming path that you want to redirect.\n   * @param {string|object} handler The path you want to redirect your user to.\n   */\n  this.when = function (what, handler) {\n    var redirect, handlerIsString = isString(handler);\n    if (isString(what)) what = $urlMatcherFactory.compile(what);\n\n    if (!handlerIsString && !isFunction(handler) && !isArray(handler))\n      throw new Error(\"invalid 'handler' in when()\");\n\n    var strategies = {\n      matcher: function (what, handler) {\n        if (handlerIsString) {\n          redirect = $urlMatcherFactory.compile(handler);\n          handler = ['$match', function ($match) { return redirect.format($match); }];\n        }\n        return extend(function ($injector, $location) {\n          return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));\n        }, {\n          prefix: isString(what.prefix) ? what.prefix : ''\n        });\n      },\n      regex: function (what, handler) {\n        if (what.global || what.sticky) throw new Error(\"when() RegExp must not be global or sticky\");\n\n        if (handlerIsString) {\n          redirect = handler;\n          handler = ['$match', function ($match) { return interpolate(redirect, $match); }];\n        }\n        return extend(function ($injector, $location) {\n          return handleIfMatch($injector, handler, what.exec($location.path()));\n        }, {\n          prefix: regExpPrefix(what)\n        });\n      }\n    };\n\n    var check = { matcher: $urlMatcherFactory.isMatcher(what), regex: what instanceof RegExp };\n\n    for (var n in check) {\n      if (check[n]) return this.rule(strategies[n](what, handler));\n    }\n\n    throw new Error(\"invalid 'what' in when()\");\n  };\n\n  /**\n   * @ngdoc function\n   * @name ui.router.router.$urlRouterProvider#deferIntercept\n   * @methodOf ui.router.router.$urlRouterProvider\n   *\n   * @description\n   * Disables (or enables) deferring location change interception.\n   *\n   * If you wish to customize the behavior of syncing the URL (for example, if you wish to\n   * defer a transition but maintain the current URL), call this method at configuration time.\n   * Then, at run time, call `$urlRouter.listen()` after you have configured your own\n   * `$locationChangeSuccess` event handler.\n   *\n   * @example\n   * <pre>\n   * var app = angular.module('app', ['ui.router.router']);\n   *\n   * app.config(function ($urlRouterProvider) {\n   *\n   *   // Prevent $urlRouter from automatically intercepting URL changes;\n   *   // this allows you to configure custom behavior in between\n   *   // location changes and route synchronization:\n   *   $urlRouterProvider.deferIntercept();\n   *\n   * }).run(function ($rootScope, $urlRouter, UserService) {\n   *\n   *   $rootScope.$on('$locationChangeSuccess', function(e) {\n   *     // UserService is an example service for managing user state\n   *     if (UserService.isLoggedIn()) return;\n   *\n   *     // Prevent $urlRouter's default handler from firing\n   *     e.preventDefault();\n   *\n   *     UserService.handleLogin().then(function() {\n   *       // Once the user has logged in, sync the current URL\n   *       // to the router:\n   *       $urlRouter.sync();\n   *     });\n   *   });\n   *\n   *   // Configures $urlRouter's listener *after* your custom listener\n   *   $urlRouter.listen();\n   * });\n   * </pre>\n   *\n   * @param {boolean} defer Indicates whether to defer location change interception. Passing\n            no parameter is equivalent to `true`.\n   */\n  this.deferIntercept = function (defer) {\n    if (defer === undefined) defer = true;\n    interceptDeferred = defer;\n  };\n\n  /**\n   * @ngdoc object\n   * @name ui.router.router.$urlRouter\n   *\n   * @requires $location\n   * @requires $rootScope\n   * @requires $injector\n   * @requires $browser\n   *\n   * @description\n   *\n   */\n  this.$get = $get;\n  $get.$inject = ['$location', '$rootScope', '$injector', '$browser'];\n  function $get(   $location,   $rootScope,   $injector,   $browser) {\n\n    var baseHref = $browser.baseHref(), location = $location.url(), lastPushedUrl;\n\n    function appendBasePath(url, isHtml5, absolute) {\n      if (baseHref === '/') return url;\n      if (isHtml5) return baseHref.slice(0, -1) + url;\n      if (absolute) return baseHref.slice(1) + url;\n      return url;\n    }\n\n    // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree\n    function update(evt) {\n      if (evt && evt.defaultPrevented) return;\n      var ignoreUpdate = lastPushedUrl && $location.url() === lastPushedUrl;\n      lastPushedUrl = undefined;\n      // TODO: Re-implement this in 1.0 for https://github.com/angular-ui/ui-router/issues/1573\n      //if (ignoreUpdate) return true;\n\n      function check(rule) {\n        var handled = rule($injector, $location);\n\n        if (!handled) return false;\n        if (isString(handled)) $location.replace().url(handled);\n        return true;\n      }\n      var n = rules.length, i;\n\n      for (i = 0; i < n; i++) {\n        if (check(rules[i])) return;\n      }\n      // always check otherwise last to allow dynamic updates to the set of rules\n      if (otherwise) check(otherwise);\n    }\n\n    function listen() {\n      listener = listener || $rootScope.$on('$locationChangeSuccess', update);\n      return listener;\n    }\n\n    if (!interceptDeferred) listen();\n\n    return {\n      /**\n       * @ngdoc function\n       * @name ui.router.router.$urlRouter#sync\n       * @methodOf ui.router.router.$urlRouter\n       *\n       * @description\n       * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.\n       * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,\n       * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed\n       * with the transition by calling `$urlRouter.sync()`.\n       *\n       * @example\n       * <pre>\n       * angular.module('app', ['ui.router'])\n       *   .run(function($rootScope, $urlRouter) {\n       *     $rootScope.$on('$locationChangeSuccess', function(evt) {\n       *       // Halt state change from even starting\n       *       evt.preventDefault();\n       *       // Perform custom logic\n       *       var meetsRequirement = ...\n       *       // Continue with the update and state transition if logic allows\n       *       if (meetsRequirement) $urlRouter.sync();\n       *     });\n       * });\n       * </pre>\n       */\n      sync: function() {\n        update();\n      },\n\n      listen: function() {\n        return listen();\n      },\n\n      update: function(read) {\n        if (read) {\n          location = $location.url();\n          return;\n        }\n        if ($location.url() === location) return;\n\n        $location.url(location);\n        $location.replace();\n      },\n\n      push: function(urlMatcher, params, options) {\n         var url = urlMatcher.format(params || {});\n\n        // Handle the special hash param, if needed\n        if (url !== null && params && params['#']) {\n            url += '#' + params['#'];\n        }\n\n        $location.url(url);\n        lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;\n        if (options && options.replace) $location.replace();\n      },\n\n      /**\n       * @ngdoc function\n       * @name ui.router.router.$urlRouter#href\n       * @methodOf ui.router.router.$urlRouter\n       *\n       * @description\n       * A URL generation method that returns the compiled URL for a given\n       * {@link ui.router.util.type:UrlMatcher `UrlMatcher`}, populated with the provided parameters.\n       *\n       * @example\n       * <pre>\n       * $bob = $urlRouter.href(new UrlMatcher(\"/about/:person\"), {\n       *   person: \"bob\"\n       * });\n       * // $bob == \"/about/bob\";\n       * </pre>\n       *\n       * @param {UrlMatcher} urlMatcher The `UrlMatcher` object which is used as the template of the URL to generate.\n       * @param {object=} params An object of parameter values to fill the matcher's required parameters.\n       * @param {object=} options Options object. The options are:\n       *\n       * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n       *\n       * @returns {string} Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n       */\n      href: function(urlMatcher, params, options) {\n        if (!urlMatcher.validates(params)) return null;\n\n        var isHtml5 = $locationProvider.html5Mode();\n        if (angular.isObject(isHtml5)) {\n          isHtml5 = isHtml5.enabled;\n        }\n        \n        var url = urlMatcher.format(params);\n        options = options || {};\n\n        if (!isHtml5 && url !== null) {\n          url = \"#\" + $locationProvider.hashPrefix() + url;\n        }\n\n        // Handle special hash param, if needed\n        if (url !== null && params && params['#']) {\n          url += '#' + params['#'];\n        }\n\n        url = appendBasePath(url, isHtml5, options.absolute);\n\n        if (!options.absolute || !url) {\n          return url;\n        }\n\n        var slash = (!isHtml5 && url ? '/' : ''), port = $location.port();\n        port = (port === 80 || port === 443 ? '' : ':' + port);\n\n        return [$location.protocol(), '://', $location.host(), port, slash, url].join('');\n      }\n    };\n  }\n}\n\nangular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);\n\n/**\n * @ngdoc object\n * @name ui.router.state.$stateProvider\n *\n * @requires ui.router.router.$urlRouterProvider\n * @requires ui.router.util.$urlMatcherFactoryProvider\n *\n * @description\n * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely\n * on state.\n *\n * A state corresponds to a \"place\" in the application in terms of the overall UI and\n * navigation. A state describes (via the controller / template / view properties) what\n * the UI looks like and does at that place.\n *\n * States often have things in common, and the primary way of factoring out these\n * commonalities in this model is via the state hierarchy, i.e. parent/child states aka\n * nested states.\n *\n * The `$stateProvider` provides interfaces to declare these states for your app.\n */\n$StateProvider.$inject = ['$urlRouterProvider', '$urlMatcherFactoryProvider'];\nfunction $StateProvider(   $urlRouterProvider,   $urlMatcherFactory) {\n\n  var root, states = {}, $state, queue = {}, abstractKey = 'abstract';\n\n  // Builds state properties from definition passed to registerState()\n  var stateBuilder = {\n\n    // Derive parent state from a hierarchical name only if 'parent' is not explicitly defined.\n    // state.children = [];\n    // if (parent) parent.children.push(state);\n    parent: function(state) {\n      if (isDefined(state.parent) && state.parent) return findState(state.parent);\n      // regex matches any valid composite state name\n      // would match \"contact.list\" but not \"contacts\"\n      var compositeName = /^(.+)\\.[^.]+$/.exec(state.name);\n      return compositeName ? findState(compositeName[1]) : root;\n    },\n\n    // inherit 'data' from parent and override by own values (if any)\n    data: function(state) {\n      if (state.parent && state.parent.data) {\n        state.data = state.self.data = extend({}, state.parent.data, state.data);\n      }\n      return state.data;\n    },\n\n    // Build a URLMatcher if necessary, either via a relative or absolute URL\n    url: function(state) {\n      var url = state.url, config = { params: state.params || {} };\n\n      if (isString(url)) {\n        if (url.charAt(0) == '^') return $urlMatcherFactory.compile(url.substring(1), config);\n        return (state.parent.navigable || root).url.concat(url, config);\n      }\n\n      if (!url || $urlMatcherFactory.isMatcher(url)) return url;\n      throw new Error(\"Invalid url '\" + url + \"' in state '\" + state + \"'\");\n    },\n\n    // Keep track of the closest ancestor state that has a URL (i.e. is navigable)\n    navigable: function(state) {\n      return state.url ? state : (state.parent ? state.parent.navigable : null);\n    },\n\n    // Own parameters for this state. state.url.params is already built at this point. Create and add non-url params\n    ownParams: function(state) {\n      var params = state.url && state.url.params || new $$UMFP.ParamSet();\n      forEach(state.params || {}, function(config, id) {\n        if (!params[id]) params[id] = new $$UMFP.Param(id, null, config, \"config\");\n      });\n      return params;\n    },\n\n    // Derive parameters for this state and ensure they're a super-set of parent's parameters\n    params: function(state) {\n      return state.parent && state.parent.params ? extend(state.parent.params.$$new(), state.ownParams) : new $$UMFP.ParamSet();\n    },\n\n    // If there is no explicit multi-view configuration, make one up so we don't have\n    // to handle both cases in the view directive later. Note that having an explicit\n    // 'views' property will mean the default unnamed view properties are ignored. This\n    // is also a good time to resolve view names to absolute names, so everything is a\n    // straight lookup at link time.\n    views: function(state) {\n      var views = {};\n\n      forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {\n        if (name.indexOf('@') < 0) name += '@' + state.parent.name;\n        views[name] = view;\n      });\n      return views;\n    },\n\n    // Keep a full path from the root down to this state as this is needed for state activation.\n    path: function(state) {\n      return state.parent ? state.parent.path.concat(state) : []; // exclude root from path\n    },\n\n    // Speed up $state.contains() as it's used a lot\n    includes: function(state) {\n      var includes = state.parent ? extend({}, state.parent.includes) : {};\n      includes[state.name] = true;\n      return includes;\n    },\n\n    $delegates: {}\n  };\n\n  function isRelative(stateName) {\n    return stateName.indexOf(\".\") === 0 || stateName.indexOf(\"^\") === 0;\n  }\n\n  function findState(stateOrName, base) {\n    if (!stateOrName) return undefined;\n\n    var isStr = isString(stateOrName),\n        name  = isStr ? stateOrName : stateOrName.name,\n        path  = isRelative(name);\n\n    if (path) {\n      if (!base) throw new Error(\"No reference point given for path '\"  + name + \"'\");\n      base = findState(base);\n      \n      var rel = name.split(\".\"), i = 0, pathLength = rel.length, current = base;\n\n      for (; i < pathLength; i++) {\n        if (rel[i] === \"\" && i === 0) {\n          current = base;\n          continue;\n        }\n        if (rel[i] === \"^\") {\n          if (!current.parent) throw new Error(\"Path '\" + name + \"' not valid for state '\" + base.name + \"'\");\n          current = current.parent;\n          continue;\n        }\n        break;\n      }\n      rel = rel.slice(i).join(\".\");\n      name = current.name + (current.name && rel ? \".\" : \"\") + rel;\n    }\n    var state = states[name];\n\n    if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {\n      return state;\n    }\n    return undefined;\n  }\n\n  function queueState(parentName, state) {\n    if (!queue[parentName]) {\n      queue[parentName] = [];\n    }\n    queue[parentName].push(state);\n  }\n\n  function flushQueuedChildren(parentName) {\n    var queued = queue[parentName] || [];\n    while(queued.length) {\n      registerState(queued.shift());\n    }\n  }\n\n  function registerState(state) {\n    // Wrap a new object around the state so we can store our private details easily.\n    state = inherit(state, {\n      self: state,\n      resolve: state.resolve || {},\n      toString: function() { return this.name; }\n    });\n\n    var name = state.name;\n    if (!isString(name) || name.indexOf('@') >= 0) throw new Error(\"State must have a valid name\");\n    if (states.hasOwnProperty(name)) throw new Error(\"State '\" + name + \"'' is already defined\");\n\n    // Get parent name\n    var parentName = (name.indexOf('.') !== -1) ? name.substring(0, name.lastIndexOf('.'))\n        : (isString(state.parent)) ? state.parent\n        : (isObject(state.parent) && isString(state.parent.name)) ? state.parent.name\n        : '';\n\n    // If parent is not registered yet, add state to queue and register later\n    if (parentName && !states[parentName]) {\n      return queueState(parentName, state.self);\n    }\n\n    for (var key in stateBuilder) {\n      if (isFunction(stateBuilder[key])) state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);\n    }\n    states[name] = state;\n\n    // Register the state in the global state list and with $urlRouter if necessary.\n    if (!state[abstractKey] && state.url) {\n      $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {\n        if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {\n          $state.transitionTo(state, $match, { inherit: true, location: false });\n        }\n      }]);\n    }\n\n    // Register any queued children\n    flushQueuedChildren(name);\n\n    return state;\n  }\n\n  // Checks text to see if it looks like a glob.\n  function isGlob (text) {\n    return text.indexOf('*') > -1;\n  }\n\n  // Returns true if glob matches current $state name.\n  function doesStateMatchGlob (glob) {\n    var globSegments = glob.split('.'),\n        segments = $state.$current.name.split('.');\n\n    //match single stars\n    for (var i = 0, l = globSegments.length; i < l; i++) {\n      if (globSegments[i] === '*') {\n        segments[i] = '*';\n      }\n    }\n\n    //match greedy starts\n    if (globSegments[0] === '**') {\n       segments = segments.slice(indexOf(segments, globSegments[1]));\n       segments.unshift('**');\n    }\n    //match greedy ends\n    if (globSegments[globSegments.length - 1] === '**') {\n       segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);\n       segments.push('**');\n    }\n\n    if (globSegments.length != segments.length) {\n      return false;\n    }\n\n    return segments.join('') === globSegments.join('');\n  }\n\n\n  // Implicit root state that is always active\n  root = registerState({\n    name: '',\n    url: '^',\n    views: null,\n    'abstract': true\n  });\n  root.navigable = null;\n\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$stateProvider#decorator\n   * @methodOf ui.router.state.$stateProvider\n   *\n   * @description\n   * Allows you to extend (carefully) or override (at your own peril) the \n   * `stateBuilder` object used internally by `$stateProvider`. This can be used \n   * to add custom functionality to ui-router, for example inferring templateUrl \n   * based on the state name.\n   *\n   * When passing only a name, it returns the current (original or decorated) builder\n   * function that matches `name`.\n   *\n   * The builder functions that can be decorated are listed below. Though not all\n   * necessarily have a good use case for decoration, that is up to you to decide.\n   *\n   * In addition, users can attach custom decorators, which will generate new \n   * properties within the state's internal definition. There is currently no clear \n   * use-case for this beyond accessing internal states (i.e. $state.$current), \n   * however, expect this to become increasingly relevant as we introduce additional \n   * meta-programming features.\n   *\n   * **Warning**: Decorators should not be interdependent because the order of \n   * execution of the builder functions in non-deterministic. Builder functions \n   * should only be dependent on the state definition object and super function.\n   *\n   *\n   * Existing builder functions and current return values:\n   *\n   * - **parent** `{object}` - returns the parent state object.\n   * - **data** `{object}` - returns state data, including any inherited data that is not\n   *   overridden by own values (if any).\n   * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}\n   *   or `null`.\n   * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is \n   *   navigable).\n   * - **params** `{object}` - returns an array of state params that are ensured to \n   *   be a super-set of parent's params.\n   * - **views** `{object}` - returns a views object where each key is an absolute view \n   *   name (i.e. \"viewName@stateName\") and each value is the config object \n   *   (template, controller) for the view. Even when you don't use the views object \n   *   explicitly on a state config, one is still created for you internally.\n   *   So by decorating this builder function you have access to decorating template \n   *   and controller properties.\n   * - **ownParams** `{object}` - returns an array of params that belong to the state, \n   *   not including any params defined by ancestor states.\n   * - **path** `{string}` - returns the full path from the root down to this state. \n   *   Needed for state activation.\n   * - **includes** `{object}` - returns an object that includes every state that \n   *   would pass a `$state.includes()` test.\n   *\n   * @example\n   * <pre>\n   * // Override the internal 'views' builder with a function that takes the state\n   * // definition, and a reference to the internal function being overridden:\n   * $stateProvider.decorator('views', function (state, parent) {\n   *   var result = {},\n   *       views = parent(state);\n   *\n   *   angular.forEach(views, function (config, name) {\n   *     var autoName = (state.name + '.' + name).replace('.', '/');\n   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';\n   *     result[name] = config;\n   *   });\n   *   return result;\n   * });\n   *\n   * $stateProvider.state('home', {\n   *   views: {\n   *     'contact.list': { controller: 'ListController' },\n   *     'contact.item': { controller: 'ItemController' }\n   *   }\n   * });\n   *\n   * // ...\n   *\n   * $state.go('home');\n   * // Auto-populates list and item views with /partials/home/contact/list.html,\n   * // and /partials/home/contact/item.html, respectively.\n   * </pre>\n   *\n   * @param {string} name The name of the builder function to decorate. \n   * @param {object} func A function that is responsible for decorating the original \n   * builder function. The function receives two parameters:\n   *\n   *   - `{object}` - state - The state config object.\n   *   - `{object}` - super - The original builder function.\n   *\n   * @return {object} $stateProvider - $stateProvider instance\n   */\n  this.decorator = decorator;\n  function decorator(name, func) {\n    /*jshint validthis: true */\n    if (isString(name) && !isDefined(func)) {\n      return stateBuilder[name];\n    }\n    if (!isFunction(func) || !isString(name)) {\n      return this;\n    }\n    if (stateBuilder[name] && !stateBuilder.$delegates[name]) {\n      stateBuilder.$delegates[name] = stateBuilder[name];\n    }\n    stateBuilder[name] = func;\n    return this;\n  }\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$stateProvider#state\n   * @methodOf ui.router.state.$stateProvider\n   *\n   * @description\n   * Registers a state configuration under a given state name. The stateConfig object\n   * has the following acceptable properties.\n   *\n   * @param {string} name A unique state name, e.g. \"home\", \"about\", \"contacts\".\n   * To create a parent/child state use a dot, e.g. \"about.sales\", \"home.newest\".\n   * @param {object} stateConfig State configuration object.\n   * @param {string|function=} stateConfig.template\n   * <a id='template'></a>\n   *   html template as a string or a function that returns\n   *   an html template as a string which should be used by the uiView directives. This property \n   *   takes precedence over templateUrl.\n   *   \n   *   If `template` is a function, it will be called with the following parameters:\n   *\n   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by\n   *     applying the current state\n   *\n   * <pre>template:\n   *   \"<h1>inline template definition</h1>\" +\n   *   \"<div ui-view></div>\"</pre>\n   * <pre>template: function(params) {\n   *       return \"<h1>generated template</h1>\"; }</pre>\n   * </div>\n   *\n   * @param {string|function=} stateConfig.templateUrl\n   * <a id='templateUrl'></a>\n   *\n   *   path or function that returns a path to an html\n   *   template that should be used by uiView.\n   *   \n   *   If `templateUrl` is a function, it will be called with the following parameters:\n   *\n   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by \n   *     applying the current state\n   *\n   * <pre>templateUrl: \"home.html\"</pre>\n   * <pre>templateUrl: function(params) {\n   *     return myTemplates[params.pageId]; }</pre>\n   *\n   * @param {function=} stateConfig.templateProvider\n   * <a id='templateProvider'></a>\n   *    Provider function that returns HTML content string.\n   * <pre> templateProvider:\n   *       function(MyTemplateService, params) {\n   *         return MyTemplateService.getTemplate(params.pageId);\n   *       }</pre>\n   *\n   * @param {string|function=} stateConfig.controller\n   * <a id='controller'></a>\n   *\n   *  Controller fn that should be associated with newly\n   *   related scope or the name of a registered controller if passed as a string.\n   *   Optionally, the ControllerAs may be declared here.\n   * <pre>controller: \"MyRegisteredController\"</pre>\n   * <pre>controller:\n   *     \"MyRegisteredController as fooCtrl\"}</pre>\n   * <pre>controller: function($scope, MyService) {\n   *     $scope.data = MyService.getData(); }</pre>\n   *\n   * @param {function=} stateConfig.controllerProvider\n   * <a id='controllerProvider'></a>\n   *\n   * Injectable provider function that returns the actual controller or string.\n   * <pre>controllerProvider:\n   *   function(MyResolveData) {\n   *     if (MyResolveData.foo)\n   *       return \"FooCtrl\"\n   *     else if (MyResolveData.bar)\n   *       return \"BarCtrl\";\n   *     else return function($scope) {\n   *       $scope.baz = \"Qux\";\n   *     }\n   *   }</pre>\n   *\n   * @param {string=} stateConfig.controllerAs\n   * <a id='controllerAs'></a>\n   * \n   * A controller alias name. If present the controller will be\n   *   published to scope under the controllerAs name.\n   * <pre>controllerAs: \"myCtrl\"</pre>\n   *\n   * @param {string|object=} stateConfig.parent\n   * <a id='parent'></a>\n   * Optionally specifies the parent state of this state.\n   *\n   * <pre>parent: 'parentState'</pre>\n   * <pre>parent: parentState // JS variable</pre>\n   *\n   * @param {object=} stateConfig.resolve\n   * <a id='resolve'></a>\n   *\n   * An optional map&lt;string, function&gt; of dependencies which\n   *   should be injected into the controller. If any of these dependencies are promises, \n   *   the router will wait for them all to be resolved before the controller is instantiated.\n   *   If all the promises are resolved successfully, the $stateChangeSuccess event is fired\n   *   and the values of the resolved promises are injected into any controllers that reference them.\n   *   If any  of the promises are rejected the $stateChangeError event is fired.\n   *\n   *   The map object is:\n   *   \n   *   - key - {string}: name of dependency to be injected into controller\n   *   - factory - {string|function}: If string then it is alias for service. Otherwise if function, \n   *     it is injected and return value it treated as dependency. If result is a promise, it is \n   *     resolved before its value is injected into controller.\n   *\n   * <pre>resolve: {\n   *     myResolve1:\n   *       function($http, $stateParams) {\n   *         return $http.get(\"/api/foos/\"+stateParams.fooID);\n   *       }\n   *     }</pre>\n   *\n   * @param {string=} stateConfig.url\n   * <a id='url'></a>\n   *\n   *   A url fragment with optional parameters. When a state is navigated or\n   *   transitioned to, the `$stateParams` service will be populated with any \n   *   parameters that were passed.\n   *\n   *   (See {@link ui.router.util.type:UrlMatcher UrlMatcher} `UrlMatcher`} for\n   *   more details on acceptable patterns )\n   *\n   * examples:\n   * <pre>url: \"/home\"\n   * url: \"/users/:userid\"\n   * url: \"/books/{bookid:[a-zA-Z_-]}\"\n   * url: \"/books/{categoryid:int}\"\n   * url: \"/books/{publishername:string}/{categoryid:int}\"\n   * url: \"/messages?before&after\"\n   * url: \"/messages?{before:date}&{after:date}\"\n   * url: \"/messages/:mailboxid?{before:date}&{after:date}\"\n   * </pre>\n   *\n   * @param {object=} stateConfig.views\n   * <a id='views'></a>\n   * an optional map&lt;string, object&gt; which defined multiple views, or targets views\n   * manually/explicitly.\n   *\n   * Examples:\n   *\n   * Targets three named `ui-view`s in the parent state's template\n   * <pre>views: {\n   *     header: {\n   *       controller: \"headerCtrl\",\n   *       templateUrl: \"header.html\"\n   *     }, body: {\n   *       controller: \"bodyCtrl\",\n   *       templateUrl: \"body.html\"\n   *     }, footer: {\n   *       controller: \"footCtrl\",\n   *       templateUrl: \"footer.html\"\n   *     }\n   *   }</pre>\n   *\n   * Targets named `ui-view=\"header\"` from grandparent state 'top''s template, and named `ui-view=\"body\" from parent state's template.\n   * <pre>views: {\n   *     'header@top': {\n   *       controller: \"msgHeaderCtrl\",\n   *       templateUrl: \"msgHeader.html\"\n   *     }, 'body': {\n   *       controller: \"messagesCtrl\",\n   *       templateUrl: \"messages.html\"\n   *     }\n   *   }</pre>\n   *\n   * @param {boolean=} [stateConfig.abstract=false]\n   * <a id='abstract'></a>\n   * An abstract state will never be directly activated,\n   *   but can provide inherited properties to its common children states.\n   * <pre>abstract: true</pre>\n   *\n   * @param {function=} stateConfig.onEnter\n   * <a id='onEnter'></a>\n   *\n   * Callback function for when a state is entered. Good way\n   *   to trigger an action or dispatch an event, such as opening a dialog.\n   * If minifying your scripts, make sure to explictly annotate this function,\n   * because it won't be automatically annotated by your build tools.\n   *\n   * <pre>onEnter: function(MyService, $stateParams) {\n   *     MyService.foo($stateParams.myParam);\n   * }</pre>\n   *\n   * @param {function=} stateConfig.onExit\n   * <a id='onExit'></a>\n   *\n   * Callback function for when a state is exited. Good way to\n   *   trigger an action or dispatch an event, such as opening a dialog.\n   * If minifying your scripts, make sure to explictly annotate this function,\n   * because it won't be automatically annotated by your build tools.\n   *\n   * <pre>onExit: function(MyService, $stateParams) {\n   *     MyService.cleanup($stateParams.myParam);\n   * }</pre>\n   *\n   * @param {boolean=} [stateConfig.reloadOnSearch=true]\n   * <a id='reloadOnSearch'></a>\n   *\n   * If `false`, will not retrigger the same state\n   *   just because a search/query parameter has changed (via $location.search() or $location.hash()). \n   *   Useful for when you'd like to modify $location.search() without triggering a reload.\n   * <pre>reloadOnSearch: false</pre>\n   *\n   * @param {object=} stateConfig.data\n   * <a id='data'></a>\n   *\n   * Arbitrary data object, useful for custom configuration.  The parent state's `data` is\n   *   prototypally inherited.  In other words, adding a data property to a state adds it to\n   *   the entire subtree via prototypal inheritance.\n   *\n   * <pre>data: {\n   *     requiredRole: 'foo'\n   * } </pre>\n   *\n   * @param {object=} stateConfig.params\n   * <a id='params'></a>\n   *\n   * A map which optionally configures parameters declared in the `url`, or\n   *   defines additional non-url parameters.  For each parameter being\n   *   configured, add a configuration object keyed to the name of the parameter.\n   *\n   *   Each parameter configuration object may contain the following properties:\n   *\n   *   - ** value ** - {object|function=}: specifies the default value for this\n   *     parameter.  This implicitly sets this parameter as optional.\n   *\n   *     When UI-Router routes to a state and no value is\n   *     specified for this parameter in the URL or transition, the\n   *     default value will be used instead.  If `value` is a function,\n   *     it will be injected and invoked, and the return value used.\n   *\n   *     *Note*: `undefined` is treated as \"no default value\" while `null`\n   *     is treated as \"the default value is `null`\".\n   *\n   *     *Shorthand*: If you only need to configure the default value of the\n   *     parameter, you may use a shorthand syntax.   In the **`params`**\n   *     map, instead mapping the param name to a full parameter configuration\n   *     object, simply set map it to the default parameter value, e.g.:\n   *\n   * <pre>// define a parameter's default value\n   * params: {\n   *     param1: { value: \"defaultValue\" }\n   * }\n   * // shorthand default values\n   * params: {\n   *     param1: \"defaultValue\",\n   *     param2: \"param2Default\"\n   * }</pre>\n   *\n   *   - ** array ** - {boolean=}: *(default: false)* If true, the param value will be\n   *     treated as an array of values.  If you specified a Type, the value will be\n   *     treated as an array of the specified Type.  Note: query parameter values\n   *     default to a special `\"auto\"` mode.\n   *\n   *     For query parameters in `\"auto\"` mode, if multiple  values for a single parameter\n   *     are present in the URL (e.g.: `/foo?bar=1&bar=2&bar=3`) then the values\n   *     are mapped to an array (e.g.: `{ foo: [ '1', '2', '3' ] }`).  However, if\n   *     only one value is present (e.g.: `/foo?bar=1`) then the value is treated as single\n   *     value (e.g.: `{ foo: '1' }`).\n   *\n   * <pre>params: {\n   *     param1: { array: true }\n   * }</pre>\n   *\n   *   - ** squash ** - {bool|string=}: `squash` configures how a default parameter value is represented in the URL when\n   *     the current parameter value is the same as the default value. If `squash` is not set, it uses the\n   *     configured default squash policy.\n   *     (See {@link ui.router.util.$urlMatcherFactory#methods_defaultSquashPolicy `defaultSquashPolicy()`})\n   *\n   *   There are three squash settings:\n   *\n   *     - false: The parameter's default value is not squashed.  It is encoded and included in the URL\n   *     - true: The parameter's default value is omitted from the URL.  If the parameter is preceeded and followed\n   *       by slashes in the state's `url` declaration, then one of those slashes are omitted.\n   *       This can allow for cleaner looking URLs.\n   *     - `\"<arbitrary string>\"`: The parameter's default value is replaced with an arbitrary placeholder of  your choice.\n   *\n   * <pre>params: {\n   *     param1: {\n   *       value: \"defaultId\",\n   *       squash: true\n   * } }\n   * // squash \"defaultValue\" to \"~\"\n   * params: {\n   *     param1: {\n   *       value: \"defaultValue\",\n   *       squash: \"~\"\n   * } }\n   * </pre>\n   *\n   *\n   * @example\n   * <pre>\n   * // Some state name examples\n   *\n   * // stateName can be a single top-level name (must be unique).\n   * $stateProvider.state(\"home\", {});\n   *\n   * // Or it can be a nested state name. This state is a child of the\n   * // above \"home\" state.\n   * $stateProvider.state(\"home.newest\", {});\n   *\n   * // Nest states as deeply as needed.\n   * $stateProvider.state(\"home.newest.abc.xyz.inception\", {});\n   *\n   * // state() returns $stateProvider, so you can chain state declarations.\n   * $stateProvider\n   *   .state(\"home\", {})\n   *   .state(\"about\", {})\n   *   .state(\"contacts\", {});\n   * </pre>\n   *\n   */\n  this.state = state;\n  function state(name, definition) {\n    /*jshint validthis: true */\n    if (isObject(name)) definition = name;\n    else definition.name = name;\n    registerState(definition);\n    return this;\n  }\n\n  /**\n   * @ngdoc object\n   * @name ui.router.state.$state\n   *\n   * @requires $rootScope\n   * @requires $q\n   * @requires ui.router.state.$view\n   * @requires $injector\n   * @requires ui.router.util.$resolve\n   * @requires ui.router.state.$stateParams\n   * @requires ui.router.router.$urlRouter\n   *\n   * @property {object} params A param object, e.g. {sectionId: section.id)}, that \n   * you'd like to test against the current active state.\n   * @property {object} current A reference to the state's config object. However \n   * you passed it in. Useful for accessing custom data.\n   * @property {object} transition Currently pending transition. A promise that'll \n   * resolve or reject.\n   *\n   * @description\n   * `$state` service is responsible for representing states as well as transitioning\n   * between them. It also provides interfaces to ask for current state or even states\n   * you're coming from.\n   */\n  this.$get = $get;\n  $get.$inject = ['$rootScope', '$q', '$view', '$injector', '$resolve', '$stateParams', '$urlRouter', '$location', '$urlMatcherFactory'];\n  function $get(   $rootScope,   $q,   $view,   $injector,   $resolve,   $stateParams,   $urlRouter,   $location,   $urlMatcherFactory) {\n\n    var TransitionSuperseded = $q.reject(new Error('transition superseded'));\n    var TransitionPrevented = $q.reject(new Error('transition prevented'));\n    var TransitionAborted = $q.reject(new Error('transition aborted'));\n    var TransitionFailed = $q.reject(new Error('transition failed'));\n\n    // Handles the case where a state which is the target of a transition is not found, and the user\n    // can optionally retry or defer the transition\n    function handleRedirect(redirect, state, params, options) {\n      /**\n       * @ngdoc event\n       * @name ui.router.state.$state#$stateNotFound\n       * @eventOf ui.router.state.$state\n       * @eventType broadcast on root scope\n       * @description\n       * Fired when a requested state **cannot be found** using the provided state name during transition.\n       * The event is broadcast allowing any handlers a single chance to deal with the error (usually by\n       * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,\n       * you can see its three properties in the example. You can use `event.preventDefault()` to abort the\n       * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.\n       *\n       * @param {Object} event Event object.\n       * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.\n       * @param {State} fromState Current state object.\n       * @param {Object} fromParams Current state params.\n       *\n       * @example\n       *\n       * <pre>\n       * // somewhere, assume lazy.state has not been defined\n       * $state.go(\"lazy.state\", {a:1, b:2}, {inherit:false});\n       *\n       * // somewhere else\n       * $scope.$on('$stateNotFound',\n       * function(event, unfoundState, fromState, fromParams){\n       *     console.log(unfoundState.to); // \"lazy.state\"\n       *     console.log(unfoundState.toParams); // {a:1, b:2}\n       *     console.log(unfoundState.options); // {inherit:false} + default options\n       * })\n       * </pre>\n       */\n      var evt = $rootScope.$broadcast('$stateNotFound', redirect, state, params);\n\n      if (evt.defaultPrevented) {\n        $urlRouter.update();\n        return TransitionAborted;\n      }\n\n      if (!evt.retry) {\n        return null;\n      }\n\n      // Allow the handler to return a promise to defer state lookup retry\n      if (options.$retry) {\n        $urlRouter.update();\n        return TransitionFailed;\n      }\n      var retryTransition = $state.transition = $q.when(evt.retry);\n\n      retryTransition.then(function() {\n        if (retryTransition !== $state.transition) return TransitionSuperseded;\n        redirect.options.$retry = true;\n        return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);\n      }, function() {\n        return TransitionAborted;\n      });\n      $urlRouter.update();\n\n      return retryTransition;\n    }\n\n    root.locals = { resolve: null, globals: { $stateParams: {} } };\n\n    $state = {\n      params: {},\n      current: root.self,\n      $current: root,\n      transition: null\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#reload\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * A method that force reloads the current state. All resolves are re-resolved,\n     * controllers reinstantiated, and events re-fired.\n     *\n     * @example\n     * <pre>\n     * var app angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.reload = function(){\n     *     $state.reload();\n     *   }\n     * });\n     * </pre>\n     *\n     * `reload()` is just an alias for:\n     * <pre>\n     * $state.transitionTo($state.current, $stateParams, { \n     *   reload: true, inherit: false, notify: true\n     * });\n     * </pre>\n     *\n     * @param {string=|object=} state - A state name or a state object, which is the root of the resolves to be re-resolved.\n     * @example\n     * <pre>\n     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item' \n     * //and current state is 'contacts.detail.item'\n     * var app angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.reload = function(){\n     *     //will reload 'contact.detail' and 'contact.detail.item' states\n     *     $state.reload('contact.detail');\n     *   }\n     * });\n     * </pre>\n     *\n     * `reload()` is just an alias for:\n     * <pre>\n     * $state.transitionTo($state.current, $stateParams, { \n     *   reload: true, inherit: false, notify: true\n     * });\n     * </pre>\n\n     * @returns {promise} A promise representing the state of the new transition. See\n     * {@link ui.router.state.$state#methods_go $state.go}.\n     */\n    $state.reload = function reload(state) {\n      return $state.transitionTo($state.current, $stateParams, { reload: state || true, inherit: false, notify: true});\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#go\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * Convenience method for transitioning to a new state. `$state.go` calls \n     * `$state.transitionTo` internally but automatically sets options to \n     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`. \n     * This allows you to easily use an absolute or relative to path and specify \n     * only the parameters you'd like to update (while letting unspecified parameters \n     * inherit from the currently active ancestor states).\n     *\n     * @example\n     * <pre>\n     * var app = angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.changeState = function () {\n     *     $state.go('contact.detail');\n     *   };\n     * });\n     * </pre>\n     * <img src='../ngdoc_assets/StateGoExamples.png'/>\n     *\n     * @param {string} to Absolute state name or relative state path. Some examples:\n     *\n     * - `$state.go('contact.detail')` - will go to the `contact.detail` state\n     * - `$state.go('^')` - will go to a parent state\n     * - `$state.go('^.sibling')` - will go to a sibling state\n     * - `$state.go('.child.grandchild')` - will go to grandchild state\n     *\n     * @param {object=} params A map of the parameters that will be sent to the state, \n     * will populate $stateParams. Any parameters that are not specified will be inherited from currently \n     * defined parameters. This allows, for example, going to a sibling state that shares parameters\n     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.\n     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child\n     * will get you all current parameters, etc.\n     * @param {object=} options Options object. The options are:\n     *\n     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n     *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), \n     *    defines which state to be relative from.\n     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params \n     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\n     *    use this when you want to force a reload when *everything* is the same, including search params.\n     *\n     * @returns {promise} A promise representing the state of the new transition.\n     *\n     * Possible success values:\n     *\n     * - $state.current\n     *\n     * <br/>Possible rejection values:\n     *\n     * - 'transition superseded' - when a newer transition has been started after this one\n     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener\n     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or\n     *   when a `$stateNotFound` `event.retry` promise errors.\n     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.\n     * - *resolve error* - when an error has occurred with a `resolve`\n     *\n     */\n    $state.go = function go(to, params, options) {\n      return $state.transitionTo(to, params, extend({ inherit: true, relative: $state.$current }, options));\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#transitionTo\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}\n     * uses `transitionTo` internally. `$state.go` is recommended in most situations.\n     *\n     * @example\n     * <pre>\n     * var app = angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.changeState = function () {\n     *     $state.transitionTo('contact.detail');\n     *   };\n     * });\n     * </pre>\n     *\n     * @param {string} to State name.\n     * @param {object=} toParams A map of the parameters that will be sent to the state,\n     * will populate $stateParams.\n     * @param {object=} options Options object. The options are:\n     *\n     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`\n     *    will not. If string, must be `\"replace\"`, which will update url and also replace last history record.\n     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.\n     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'), \n     *    defines which state to be relative from.\n     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.\n     * - **`reload`** (v0.2.5) - {boolean=false|string=|object=}, If `true` will force transition even if the state or params \n     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd\n     *    use this when you want to force a reload when *everything* is the same, including search params.\n     *    if String, then will reload the state with the name given in reload, and any children.\n     *    if Object, then a stateObj is expected, will reload the state found in stateObj, and any children.\n     *\n     * @returns {promise} A promise representing the state of the new transition. See\n     * {@link ui.router.state.$state#methods_go $state.go}.\n     */\n    $state.transitionTo = function transitionTo(to, toParams, options) {\n      toParams = toParams || {};\n      options = extend({\n        location: true, inherit: false, relative: null, notify: true, reload: false, $retry: false\n      }, options || {});\n\n      var from = $state.$current, fromParams = $state.params, fromPath = from.path;\n      var evt, toState = findState(to, options.relative);\n\n      // Store the hash param for later (since it will be stripped out by various methods)\n      var hash = toParams['#'];\n\n      if (!isDefined(toState)) {\n        var redirect = { to: to, toParams: toParams, options: options };\n        var redirectResult = handleRedirect(redirect, from.self, fromParams, options);\n\n        if (redirectResult) {\n          return redirectResult;\n        }\n\n        // Always retry once if the $stateNotFound was not prevented\n        // (handles either redirect changed or state lazy-definition)\n        to = redirect.to;\n        toParams = redirect.toParams;\n        options = redirect.options;\n        toState = findState(to, options.relative);\n\n        if (!isDefined(toState)) {\n          if (!options.relative) throw new Error(\"No such state '\" + to + \"'\");\n          throw new Error(\"Could not resolve '\" + to + \"' from state '\" + options.relative + \"'\");\n        }\n      }\n      if (toState[abstractKey]) throw new Error(\"Cannot transition to abstract state '\" + to + \"'\");\n      if (options.inherit) toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);\n      if (!toState.params.$$validates(toParams)) return TransitionFailed;\n\n      toParams = toState.params.$$values(toParams);\n      to = toState;\n\n      var toPath = to.path;\n\n      // Starting from the root of the path, keep all levels that haven't changed\n      var keep = 0, state = toPath[keep], locals = root.locals, toLocals = [];\n\n      if (!options.reload) {\n        while (state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams)) {\n          locals = toLocals[keep] = state.locals;\n          keep++;\n          state = toPath[keep];\n        }\n      } else if (isString(options.reload) || isObject(options.reload)) {\n        if (isObject(options.reload) && !options.reload.name) {\n          throw new Error('Invalid reload state object');\n        }\n        \n        var reloadState = options.reload === true ? fromPath[0] : findState(options.reload);\n        if (options.reload && !reloadState) {\n          throw new Error(\"No such reload state '\" + (isString(options.reload) ? options.reload : options.reload.name) + \"'\");\n        }\n\n        while (state && state === fromPath[keep] && state !== reloadState) {\n          locals = toLocals[keep] = state.locals;\n          keep++;\n          state = toPath[keep];\n        }\n      }\n\n      // If we're going to the same state and all locals are kept, we've got nothing to do.\n      // But clear 'transition', as we still want to cancel any other pending transitions.\n      // TODO: We may not want to bump 'transition' if we're called from a location change\n      // that we've initiated ourselves, because we might accidentally abort a legitimate\n      // transition initiated from code?\n      if (shouldSkipReload(to, toParams, from, fromParams, locals, options)) {\n        if (hash) toParams['#'] = hash;\n        $state.params = toParams;\n        copy($state.params, $stateParams);\n        if (options.location && to.navigable && to.navigable.url) {\n          $urlRouter.push(to.navigable.url, toParams, {\n            $$avoidResync: true, replace: options.location === 'replace'\n          });\n          $urlRouter.update(true);\n        }\n        $state.transition = null;\n        return $q.when($state.current);\n      }\n\n      // Filter parameters before we pass them to event handlers etc.\n      toParams = filterByKeys(to.params.$$keys(), toParams || {});\n\n      // Broadcast start event and cancel the transition if requested\n      if (options.notify) {\n        /**\n         * @ngdoc event\n         * @name ui.router.state.$state#$stateChangeStart\n         * @eventOf ui.router.state.$state\n         * @eventType broadcast on root scope\n         * @description\n         * Fired when the state transition **begins**. You can use `event.preventDefault()`\n         * to prevent the transition from happening and then the transition promise will be\n         * rejected with a `'transition prevented'` value.\n         *\n         * @param {Object} event Event object.\n         * @param {State} toState The state being transitioned to.\n         * @param {Object} toParams The params supplied to the `toState`.\n         * @param {State} fromState The current state, pre-transition.\n         * @param {Object} fromParams The params supplied to the `fromState`.\n         *\n         * @example\n         *\n         * <pre>\n         * $rootScope.$on('$stateChangeStart',\n         * function(event, toState, toParams, fromState, fromParams){\n         *     event.preventDefault();\n         *     // transitionTo() promise will be rejected with\n         *     // a 'transition prevented' error\n         * })\n         * </pre>\n         */\n        if ($rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams).defaultPrevented) {\n          $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);\n          $urlRouter.update();\n          return TransitionPrevented;\n        }\n      }\n\n      // Resolve locals for the remaining states, but don't update any global state just\n      // yet -- if anything fails to resolve the current state needs to remain untouched.\n      // We also set up an inheritance chain for the locals here. This allows the view directive\n      // to quickly look up the correct definition for each view in the current state. Even\n      // though we create the locals object itself outside resolveState(), it is initially\n      // empty and gets filled asynchronously. We need to keep track of the promise for the\n      // (fully resolved) current locals, and pass this down the chain.\n      var resolved = $q.when(locals);\n\n      for (var l = keep; l < toPath.length; l++, state = toPath[l]) {\n        locals = toLocals[l] = inherit(locals);\n        resolved = resolveState(state, toParams, state === to, resolved, locals, options);\n      }\n\n      // Once everything is resolved, we are ready to perform the actual transition\n      // and return a promise for the new state. We also keep track of what the\n      // current promise is, so that we can detect overlapping transitions and\n      // keep only the outcome of the last transition.\n      var transition = $state.transition = resolved.then(function () {\n        var l, entering, exiting;\n\n        if ($state.transition !== transition) return TransitionSuperseded;\n\n        // Exit 'from' states not kept\n        for (l = fromPath.length - 1; l >= keep; l--) {\n          exiting = fromPath[l];\n          if (exiting.self.onExit) {\n            $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);\n          }\n          exiting.locals = null;\n        }\n\n        // Enter 'to' states not kept\n        for (l = keep; l < toPath.length; l++) {\n          entering = toPath[l];\n          entering.locals = toLocals[l];\n          if (entering.self.onEnter) {\n            $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);\n          }\n        }\n\n        // Re-add the saved hash before we start returning things\n        if (hash) toParams['#'] = hash;\n\n        // Run it again, to catch any transitions in callbacks\n        if ($state.transition !== transition) return TransitionSuperseded;\n\n        // Update globals in $state\n        $state.$current = to;\n        $state.current = to.self;\n        $state.params = toParams;\n        copy($state.params, $stateParams);\n        $state.transition = null;\n\n        if (options.location && to.navigable) {\n          $urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {\n            $$avoidResync: true, replace: options.location === 'replace'\n          });\n        }\n\n        if (options.notify) {\n        /**\n         * @ngdoc event\n         * @name ui.router.state.$state#$stateChangeSuccess\n         * @eventOf ui.router.state.$state\n         * @eventType broadcast on root scope\n         * @description\n         * Fired once the state transition is **complete**.\n         *\n         * @param {Object} event Event object.\n         * @param {State} toState The state being transitioned to.\n         * @param {Object} toParams The params supplied to the `toState`.\n         * @param {State} fromState The current state, pre-transition.\n         * @param {Object} fromParams The params supplied to the `fromState`.\n         */\n          $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);\n        }\n        $urlRouter.update(true);\n\n        return $state.current;\n      }, function (error) {\n        if ($state.transition !== transition) return TransitionSuperseded;\n\n        $state.transition = null;\n        /**\n         * @ngdoc event\n         * @name ui.router.state.$state#$stateChangeError\n         * @eventOf ui.router.state.$state\n         * @eventType broadcast on root scope\n         * @description\n         * Fired when an **error occurs** during transition. It's important to note that if you\n         * have any errors in your resolve functions (javascript errors, non-existent services, etc)\n         * they will not throw traditionally. You must listen for this $stateChangeError event to\n         * catch **ALL** errors.\n         *\n         * @param {Object} event Event object.\n         * @param {State} toState The state being transitioned to.\n         * @param {Object} toParams The params supplied to the `toState`.\n         * @param {State} fromState The current state, pre-transition.\n         * @param {Object} fromParams The params supplied to the `fromState`.\n         * @param {Error} error The resolve error object.\n         */\n        evt = $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);\n\n        if (!evt.defaultPrevented) {\n            $urlRouter.update();\n        }\n\n        return $q.reject(error);\n      });\n\n      return transition;\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#is\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},\n     * but only checks for the full state name. If params is supplied then it will be\n     * tested for strict equality against the current active params object, so all params\n     * must match with none missing and no extras.\n     *\n     * @example\n     * <pre>\n     * $state.$current.name = 'contacts.details.item';\n     *\n     * // absolute name\n     * $state.is('contact.details.item'); // returns true\n     * $state.is(contactDetailItemStateObject); // returns true\n     *\n     * // relative name (. and ^), typically from a template\n     * // E.g. from the 'contacts.details' template\n     * <div ng-class=\"{highlighted: $state.is('.item')}\">Item</div>\n     * </pre>\n     *\n     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.\n     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like\n     * to test against the current active state.\n     * @param {object=} options An options object.  The options are:\n     *\n     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will\n     * test relative to `options.relative` state (or name).\n     *\n     * @returns {boolean} Returns true if it is the state.\n     */\n    $state.is = function is(stateOrName, params, options) {\n      options = extend({ relative: $state.$current }, options || {});\n      var state = findState(stateOrName, options.relative);\n\n      if (!isDefined(state)) { return undefined; }\n      if ($state.$current !== state) { return false; }\n      return params ? equalForKeys(state.params.$$values(params), $stateParams) : true;\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#includes\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * A method to determine if the current active state is equal to or is the child of the\n     * state stateName. If any params are passed then they will be tested for a match as well.\n     * Not all the parameters need to be passed, just the ones you'd like to test for equality.\n     *\n     * @example\n     * Partial and relative names\n     * <pre>\n     * $state.$current.name = 'contacts.details.item';\n     *\n     * // Using partial names\n     * $state.includes(\"contacts\"); // returns true\n     * $state.includes(\"contacts.details\"); // returns true\n     * $state.includes(\"contacts.details.item\"); // returns true\n     * $state.includes(\"contacts.list\"); // returns false\n     * $state.includes(\"about\"); // returns false\n     *\n     * // Using relative names (. and ^), typically from a template\n     * // E.g. from the 'contacts.details' template\n     * <div ng-class=\"{highlighted: $state.includes('.item')}\">Item</div>\n     * </pre>\n     *\n     * Basic globbing patterns\n     * <pre>\n     * $state.$current.name = 'contacts.details.item.url';\n     *\n     * $state.includes(\"*.details.*.*\"); // returns true\n     * $state.includes(\"*.details.**\"); // returns true\n     * $state.includes(\"**.item.**\"); // returns true\n     * $state.includes(\"*.details.item.url\"); // returns true\n     * $state.includes(\"*.details.*.url\"); // returns true\n     * $state.includes(\"*.details.*\"); // returns false\n     * $state.includes(\"item.**\"); // returns false\n     * </pre>\n     *\n     * @param {string} stateOrName A partial name, relative name, or glob pattern\n     * to be searched for within the current state name.\n     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,\n     * that you'd like to test against the current active state.\n     * @param {object=} options An options object.  The options are:\n     *\n     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,\n     * .includes will test relative to `options.relative` state (or name).\n     *\n     * @returns {boolean} Returns true if it does include the state\n     */\n    $state.includes = function includes(stateOrName, params, options) {\n      options = extend({ relative: $state.$current }, options || {});\n      if (isString(stateOrName) && isGlob(stateOrName)) {\n        if (!doesStateMatchGlob(stateOrName)) {\n          return false;\n        }\n        stateOrName = $state.$current.name;\n      }\n\n      var state = findState(stateOrName, options.relative);\n      if (!isDefined(state)) { return undefined; }\n      if (!isDefined($state.$current.includes[state.name])) { return false; }\n      return params ? equalForKeys(state.params.$$values(params), $stateParams, objectKeys(params)) : true;\n    };\n\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#href\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * A url generation method that returns the compiled url for the given state populated with the given params.\n     *\n     * @example\n     * <pre>\n     * expect($state.href(\"about.person\", { person: \"bob\" })).toEqual(\"/about/bob\");\n     * </pre>\n     *\n     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.\n     * @param {object=} params An object of parameter values to fill the state's required parameters.\n     * @param {object=} options Options object. The options are:\n     *\n     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the\n     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka\n     *    ancestor with a valid url).\n     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.\n     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), \n     *    defines which state to be relative from.\n     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n     * \n     * @returns {string} compiled state url\n     */\n    $state.href = function href(stateOrName, params, options) {\n      options = extend({\n        lossy:    true,\n        inherit:  true,\n        absolute: false,\n        relative: $state.$current\n      }, options || {});\n\n      var state = findState(stateOrName, options.relative);\n\n      if (!isDefined(state)) return null;\n      if (options.inherit) params = inheritParams($stateParams, params || {}, $state.$current, state);\n      \n      var nav = (state && options.lossy) ? state.navigable : state;\n\n      if (!nav || nav.url === undefined || nav.url === null) {\n        return null;\n      }\n      return $urlRouter.href(nav.url, filterByKeys(state.params.$$keys().concat('#'), params || {}), {\n        absolute: options.absolute\n      });\n    };\n\n    /**\n     * @ngdoc function\n     * @name ui.router.state.$state#get\n     * @methodOf ui.router.state.$state\n     *\n     * @description\n     * Returns the state configuration object for any specific state or all states.\n     *\n     * @param {string|object=} stateOrName (absolute or relative) If provided, will only get the config for\n     * the requested state. If not provided, returns an array of ALL state configs.\n     * @param {string|object=} context When stateOrName is a relative state reference, the state will be retrieved relative to context.\n     * @returns {Object|Array} State configuration object or array of all objects.\n     */\n    $state.get = function (stateOrName, context) {\n      if (arguments.length === 0) return map(objectKeys(states), function(name) { return states[name].self; });\n      var state = findState(stateOrName, context || $state.$current);\n      return (state && state.self) ? state.self : null;\n    };\n\n    function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {\n      // Make a restricted $stateParams with only the parameters that apply to this state if\n      // necessary. In addition to being available to the controller and onEnter/onExit callbacks,\n      // we also need $stateParams to be available for any $injector calls we make during the\n      // dependency resolution process.\n      var $stateParams = (paramsAreFiltered) ? params : filterByKeys(state.params.$$keys(), params);\n      var locals = { $stateParams: $stateParams };\n\n      // Resolve 'global' dependencies for the state, i.e. those not specific to a view.\n      // We're also including $stateParams in this; that way the parameters are restricted\n      // to the set that should be visible to the state, and are independent of when we update\n      // the global $state and $stateParams values.\n      dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);\n      var promises = [dst.resolve.then(function (globals) {\n        dst.globals = globals;\n      })];\n      if (inherited) promises.push(inherited);\n\n      function resolveViews() {\n        var viewsPromises = [];\n\n        // Resolve template and dependencies for all views.\n        forEach(state.views, function (view, name) {\n          var injectables = (view.resolve && view.resolve !== state.resolve ? view.resolve : {});\n          injectables.$template = [ function () {\n            return $view.load(name, { view: view, locals: dst.globals, params: $stateParams, notify: options.notify }) || '';\n          }];\n\n          viewsPromises.push($resolve.resolve(injectables, dst.globals, dst.resolve, state).then(function (result) {\n            // References to the controller (only instantiated at link time)\n            if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {\n              var injectLocals = angular.extend({}, injectables, dst.globals);\n              result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);\n            } else {\n              result.$$controller = view.controller;\n            }\n            // Provide access to the state itself for internal use\n            result.$$state = state;\n            result.$$controllerAs = view.controllerAs;\n            dst[name] = result;\n          }));\n        });\n\n        return $q.all(viewsPromises).then(function(){\n          return dst.globals;\n        });\n      }\n\n      // Wait for all the promises and then return the activation object\n      return $q.all(promises).then(resolveViews).then(function (values) {\n        return dst;\n      });\n    }\n\n    return $state;\n  }\n\n  function shouldSkipReload(to, toParams, from, fromParams, locals, options) {\n    // Return true if there are no differences in non-search (path/object) params, false if there are differences\n    function nonSearchParamsEqual(fromAndToState, fromParams, toParams) {\n      // Identify whether all the parameters that differ between `fromParams` and `toParams` were search params.\n      function notSearchParam(key) {\n        return fromAndToState.params[key].location != \"search\";\n      }\n      var nonQueryParamKeys = fromAndToState.params.$$keys().filter(notSearchParam);\n      var nonQueryParams = pick.apply({}, [fromAndToState.params].concat(nonQueryParamKeys));\n      var nonQueryParamSet = new $$UMFP.ParamSet(nonQueryParams);\n      return nonQueryParamSet.$$equals(fromParams, toParams);\n    }\n\n    // If reload was not explicitly requested\n    // and we're transitioning to the same state we're already in\n    // and    the locals didn't change\n    //     or they changed in a way that doesn't merit reloading\n    //        (reloadOnParams:false, or reloadOnSearch.false and only search params changed)\n    // Then return true.\n    if (!options.reload && to === from &&\n      (locals === from.locals || (to.self.reloadOnSearch === false && nonSearchParamsEqual(from, fromParams, toParams)))) {\n      return true;\n    }\n  }\n}\n\nangular.module('ui.router.state')\n  .value('$stateParams', {})\n  .provider('$state', $StateProvider);\n\n\n$ViewProvider.$inject = [];\nfunction $ViewProvider() {\n\n  this.$get = $get;\n  /**\n   * @ngdoc object\n   * @name ui.router.state.$view\n   *\n   * @requires ui.router.util.$templateFactory\n   * @requires $rootScope\n   *\n   * @description\n   *\n   */\n  $get.$inject = ['$rootScope', '$templateFactory'];\n  function $get(   $rootScope,   $templateFactory) {\n    return {\n      // $view.load('full.viewName', { template: ..., controller: ..., resolve: ..., async: false, params: ... })\n      /**\n       * @ngdoc function\n       * @name ui.router.state.$view#load\n       * @methodOf ui.router.state.$view\n       *\n       * @description\n       *\n       * @param {string} name name\n       * @param {object} options option object.\n       */\n      load: function load(name, options) {\n        var result, defaults = {\n          template: null, controller: null, view: null, locals: null, notify: true, async: true, params: {}\n        };\n        options = extend(defaults, options);\n\n        if (options.view) {\n          result = $templateFactory.fromConfig(options.view, options.params, options.locals);\n        }\n        if (result && options.notify) {\n        /**\n         * @ngdoc event\n         * @name ui.router.state.$state#$viewContentLoading\n         * @eventOf ui.router.state.$view\n         * @eventType broadcast on root scope\n         * @description\n         *\n         * Fired once the view **begins loading**, *before* the DOM is rendered.\n         *\n         * @param {Object} event Event object.\n         * @param {Object} viewConfig The view config properties (template, controller, etc).\n         *\n         * @example\n         *\n         * <pre>\n         * $scope.$on('$viewContentLoading',\n         * function(event, viewConfig){\n         *     // Access to all the view config properties.\n         *     // and one special property 'targetView'\n         *     // viewConfig.targetView\n         * });\n         * </pre>\n         */\n          $rootScope.$broadcast('$viewContentLoading', options);\n        }\n        return result;\n      }\n    };\n  }\n}\n\nangular.module('ui.router.state').provider('$view', $ViewProvider);\n\n/**\n * @ngdoc object\n * @name ui.router.state.$uiViewScrollProvider\n *\n * @description\n * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.\n */\nfunction $ViewScrollProvider() {\n\n  var useAnchorScroll = false;\n\n  /**\n   * @ngdoc function\n   * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll\n   * @methodOf ui.router.state.$uiViewScrollProvider\n   *\n   * @description\n   * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for\n   * scrolling based on the url anchor.\n   */\n  this.useAnchorScroll = function () {\n    useAnchorScroll = true;\n  };\n\n  /**\n   * @ngdoc object\n   * @name ui.router.state.$uiViewScroll\n   *\n   * @requires $anchorScroll\n   * @requires $timeout\n   *\n   * @description\n   * When called with a jqLite element, it scrolls the element into view (after a\n   * `$timeout` so the DOM has time to refresh).\n   *\n   * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,\n   * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.\n   */\n  this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {\n    if (useAnchorScroll) {\n      return $anchorScroll;\n    }\n\n    return function ($element) {\n      return $timeout(function () {\n        $element[0].scrollIntoView();\n      }, 0, false);\n    };\n  }];\n}\n\nangular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);\n\n/**\n * @ngdoc directive\n * @name ui.router.state.directive:ui-view\n *\n * @requires ui.router.state.$state\n * @requires $compile\n * @requires $controller\n * @requires $injector\n * @requires ui.router.state.$uiViewScroll\n * @requires $document\n *\n * @restrict ECA\n *\n * @description\n * The ui-view directive tells $state where to place your templates.\n *\n * @param {string=} name A view name. The name should be unique amongst the other views in the\n * same state. You can have views of the same name that live in different states.\n *\n * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window\n * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll\n * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you\n * scroll ui-view elements into view when they are populated during a state activation.\n *\n * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)\n * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*\n *\n * @param {string=} onload Expression to evaluate whenever the view updates.\n * \n * @example\n * A view can be unnamed or named. \n * <pre>\n * <!-- Unnamed -->\n * <div ui-view></div> \n * \n * <!-- Named -->\n * <div ui-view=\"viewName\"></div>\n * </pre>\n *\n * You can only have one unnamed view within any template (or root html). If you are only using a \n * single view and it is unnamed then you can populate it like so:\n * <pre>\n * <div ui-view></div> \n * $stateProvider.state(\"home\", {\n *   template: \"<h1>HELLO!</h1>\"\n * })\n * </pre>\n * \n * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}\n * config property, by name, in this case an empty name:\n * <pre>\n * $stateProvider.state(\"home\", {\n *   views: {\n *     \"\": {\n *       template: \"<h1>HELLO!</h1>\"\n *     }\n *   }    \n * })\n * </pre>\n * \n * But typically you'll only use the views property if you name your view or have more than one view \n * in the same template. There's not really a compelling reason to name a view if its the only one, \n * but you could if you wanted, like so:\n * <pre>\n * <div ui-view=\"main\"></div>\n * </pre> \n * <pre>\n * $stateProvider.state(\"home\", {\n *   views: {\n *     \"main\": {\n *       template: \"<h1>HELLO!</h1>\"\n *     }\n *   }    \n * })\n * </pre>\n * \n * Really though, you'll use views to set up multiple views:\n * <pre>\n * <div ui-view></div>\n * <div ui-view=\"chart\"></div> \n * <div ui-view=\"data\"></div> \n * </pre>\n * \n * <pre>\n * $stateProvider.state(\"home\", {\n *   views: {\n *     \"\": {\n *       template: \"<h1>HELLO!</h1>\"\n *     },\n *     \"chart\": {\n *       template: \"<chart_thing/>\"\n *     },\n *     \"data\": {\n *       template: \"<data_thing/>\"\n *     }\n *   }    \n * })\n * </pre>\n *\n * Examples for `autoscroll`:\n *\n * <pre>\n * <!-- If autoscroll present with no expression,\n *      then scroll ui-view into view -->\n * <ui-view autoscroll/>\n *\n * <!-- If autoscroll present with valid expression,\n *      then scroll ui-view into view if expression evaluates to true -->\n * <ui-view autoscroll='true'/>\n * <ui-view autoscroll='false'/>\n * <ui-view autoscroll='scopeVariable'/>\n * </pre>\n */\n$ViewDirective.$inject = ['$state', '$injector', '$uiViewScroll', '$interpolate'];\nfunction $ViewDirective(   $state,   $injector,   $uiViewScroll,   $interpolate) {\n\n  function getService() {\n    return ($injector.has) ? function(service) {\n      return $injector.has(service) ? $injector.get(service) : null;\n    } : function(service) {\n      try {\n        return $injector.get(service);\n      } catch (e) {\n        return null;\n      }\n    };\n  }\n\n  var service = getService(),\n      $animator = service('$animator'),\n      $animate = service('$animate');\n\n  // Returns a set of DOM manipulation functions based on which Angular version\n  // it should use\n  function getRenderer(attrs, scope) {\n    var statics = function() {\n      return {\n        enter: function (element, target, cb) { target.after(element); cb(); },\n        leave: function (element, cb) { element.remove(); cb(); }\n      };\n    };\n\n    if ($animate) {\n      return {\n        enter: function(element, target, cb) {\n          var promise = $animate.enter(element, null, target, cb);\n          if (promise && promise.then) promise.then(cb);\n        },\n        leave: function(element, cb) {\n          var promise = $animate.leave(element, cb);\n          if (promise && promise.then) promise.then(cb);\n        }\n      };\n    }\n\n    if ($animator) {\n      var animate = $animator && $animator(scope, attrs);\n\n      return {\n        enter: function(element, target, cb) {animate.enter(element, null, target); cb(); },\n        leave: function(element, cb) { animate.leave(element); cb(); }\n      };\n    }\n\n    return statics();\n  }\n\n  var directive = {\n    restrict: 'ECA',\n    terminal: true,\n    priority: 400,\n    transclude: 'element',\n    compile: function (tElement, tAttrs, $transclude) {\n      return function (scope, $element, attrs) {\n        var previousEl, currentEl, currentScope, latestLocals,\n            onloadExp     = attrs.onload || '',\n            autoScrollExp = attrs.autoscroll,\n            renderer      = getRenderer(attrs, scope);\n\n        scope.$on('$stateChangeSuccess', function() {\n          updateView(false);\n        });\n        scope.$on('$viewContentLoading', function() {\n          updateView(false);\n        });\n\n        updateView(true);\n\n        function cleanupLastView() {\n          if (previousEl) {\n            previousEl.remove();\n            previousEl = null;\n          }\n\n          if (currentScope) {\n            currentScope.$destroy();\n            currentScope = null;\n          }\n\n          if (currentEl) {\n            renderer.leave(currentEl, function() {\n              previousEl = null;\n            });\n\n            previousEl = currentEl;\n            currentEl = null;\n          }\n        }\n\n        function updateView(firstTime) {\n          var newScope,\n              name            = getUiViewName(scope, attrs, $element, $interpolate),\n              previousLocals  = name && $state.$current && $state.$current.locals[name];\n\n          if (!firstTime && previousLocals === latestLocals) return; // nothing to do\n          newScope = scope.$new();\n          latestLocals = $state.$current.locals[name];\n\n          var clone = $transclude(newScope, function(clone) {\n            renderer.enter(clone, $element, function onUiViewEnter() {\n              if(currentScope) {\n                currentScope.$emit('$viewContentAnimationEnded');\n              }\n\n              if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {\n                $uiViewScroll(clone);\n              }\n            });\n            cleanupLastView();\n          });\n\n          currentEl = clone;\n          currentScope = newScope;\n          /**\n           * @ngdoc event\n           * @name ui.router.state.directive:ui-view#$viewContentLoaded\n           * @eventOf ui.router.state.directive:ui-view\n           * @eventType emits on ui-view directive scope\n           * @description           *\n           * Fired once the view is **loaded**, *after* the DOM is rendered.\n           *\n           * @param {Object} event Event object.\n           */\n          currentScope.$emit('$viewContentLoaded');\n          currentScope.$eval(onloadExp);\n        }\n      };\n    }\n  };\n\n  return directive;\n}\n\n$ViewDirectiveFill.$inject = ['$compile', '$controller', '$state', '$interpolate'];\nfunction $ViewDirectiveFill (  $compile,   $controller,   $state,   $interpolate) {\n  return {\n    restrict: 'ECA',\n    priority: -400,\n    compile: function (tElement) {\n      var initial = tElement.html();\n      return function (scope, $element, attrs) {\n        var current = $state.$current,\n            name = getUiViewName(scope, attrs, $element, $interpolate),\n            locals  = current && current.locals[name];\n\n        if (! locals) {\n          return;\n        }\n\n        $element.data('$uiView', { name: name, state: locals.$$state });\n        $element.html(locals.$template ? locals.$template : initial);\n\n        var link = $compile($element.contents());\n\n        if (locals.$$controller) {\n          locals.$scope = scope;\n          locals.$element = $element;\n          var controller = $controller(locals.$$controller, locals);\n          if (locals.$$controllerAs) {\n            scope[locals.$$controllerAs] = controller;\n          }\n          $element.data('$ngControllerController', controller);\n          $element.children().data('$ngControllerController', controller);\n        }\n\n        link(scope);\n      };\n    }\n  };\n}\n\n/**\n * Shared ui-view code for both directives:\n * Given scope, element, and its attributes, return the view's name\n */\nfunction getUiViewName(scope, attrs, element, $interpolate) {\n  var name = $interpolate(attrs.uiView || attrs.name || '')(scope);\n  var inherited = element.inheritedData('$uiView');\n  return name.indexOf('@') >= 0 ?  name :  (name + '@' + (inherited ? inherited.state.name : ''));\n}\n\nangular.module('ui.router.state').directive('uiView', $ViewDirective);\nangular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);\n\nfunction parseStateRef(ref, current) {\n  var preparsed = ref.match(/^\\s*({[^}]*})\\s*$/), parsed;\n  if (preparsed) ref = current + '(' + preparsed[1] + ')';\n  parsed = ref.replace(/\\n/g, \" \").match(/^([^(]+?)\\s*(\\((.*)\\))?$/);\n  if (!parsed || parsed.length !== 4) throw new Error(\"Invalid state ref '\" + ref + \"'\");\n  return { state: parsed[1], paramExpr: parsed[3] || null };\n}\n\nfunction stateContext(el) {\n  var stateData = el.parent().inheritedData('$uiView');\n\n  if (stateData && stateData.state && stateData.state.name) {\n    return stateData.state;\n  }\n}\n\n/**\n * @ngdoc directive\n * @name ui.router.state.directive:ui-sref\n *\n * @requires ui.router.state.$state\n * @requires $timeout\n *\n * @restrict A\n *\n * @description\n * A directive that binds a link (`<a>` tag) to a state. If the state has an associated \n * URL, the directive will automatically generate & update the `href` attribute via \n * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking \n * the link will trigger a state transition with optional parameters. \n *\n * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be \n * handled natively by the browser.\n *\n * You can also use relative state paths within ui-sref, just like the relative \n * paths passed to `$state.go()`. You just need to be aware that the path is relative\n * to the state that the link lives in, in other words the state that loaded the \n * template containing the link.\n *\n * You can specify options to pass to {@link ui.router.state.$state#go $state.go()}\n * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,\n * and `reload`.\n *\n * @example\n * Here's an example of how you'd use ui-sref and how it would compile. If you have the \n * following template:\n * <pre>\n * <a ui-sref=\"home\">Home</a> | <a ui-sref=\"about\">About</a> | <a ui-sref=\"{page: 2}\">Next page</a>\n * \n * <ul>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a ui-sref=\"contacts.detail({ id: contact.id })\">{{ contact.name }}</a>\n *     </li>\n * </ul>\n * </pre>\n * \n * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):\n * <pre>\n * <a href=\"#/home\" ui-sref=\"home\">Home</a> | <a href=\"#/about\" ui-sref=\"about\">About</a> | <a href=\"#/contacts?page=2\" ui-sref=\"{page: 2}\">Next page</a>\n * \n * <ul>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/1\" ui-sref=\"contacts.detail({ id: contact.id })\">Joe</a>\n *     </li>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/2\" ui-sref=\"contacts.detail({ id: contact.id })\">Alice</a>\n *     </li>\n *     <li ng-repeat=\"contact in contacts\">\n *         <a href=\"#/contacts/3\" ui-sref=\"contacts.detail({ id: contact.id })\">Bob</a>\n *     </li>\n * </ul>\n *\n * <a ui-sref=\"home\" ui-sref-opts=\"{reload: true}\">Home</a>\n * </pre>\n *\n * @param {string} ui-sref 'stateName' can be any valid absolute or relative state\n * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#go $state.go()}\n */\n$StateRefDirective.$inject = ['$state', '$timeout'];\nfunction $StateRefDirective($state, $timeout) {\n  var allowedOptions = ['location', 'inherit', 'reload', 'absolute'];\n\n  return {\n    restrict: 'A',\n    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],\n    link: function(scope, element, attrs, uiSrefActive) {\n      var ref = parseStateRef(attrs.uiSref, $state.current.name);\n      var params = null, url = null, base = stateContext(element) || $state.$current;\n      // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.\n      var hrefKind = Object.prototype.toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?\n                 'xlink:href' : 'href';\n      var newHref = null, isAnchor = element.prop(\"tagName\").toUpperCase() === \"A\";\n      var isForm = element[0].nodeName === \"FORM\";\n      var attr = isForm ? \"action\" : hrefKind, nav = true;\n\n      var options = { relative: base, inherit: true };\n      var optionsOverride = scope.$eval(attrs.uiSrefOpts) || {};\n\n      angular.forEach(allowedOptions, function(option) {\n        if (option in optionsOverride) {\n          options[option] = optionsOverride[option];\n        }\n      });\n\n      var update = function(newVal) {\n        if (newVal) params = angular.copy(newVal);\n        if (!nav) return;\n\n        newHref = $state.href(ref.state, params, options);\n\n        var activeDirective = uiSrefActive[1] || uiSrefActive[0];\n        if (activeDirective) {\n          activeDirective.$$addStateInfo(ref.state, params);\n        }\n        if (newHref === null) {\n          nav = false;\n          return false;\n        }\n        attrs.$set(attr, newHref);\n      };\n\n      if (ref.paramExpr) {\n        scope.$watch(ref.paramExpr, function(newVal, oldVal) {\n          if (newVal !== params) update(newVal);\n        }, true);\n        params = angular.copy(scope.$eval(ref.paramExpr));\n      }\n      update();\n\n      if (isForm) return;\n\n      element.bind(\"click\", function(e) {\n        var button = e.which || e.button;\n        if ( !(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || element.attr('target')) ) {\n          // HACK: This is to allow ng-clicks to be processed before the transition is initiated:\n          var transition = $timeout(function() {\n            $state.go(ref.state, params, options);\n          });\n          e.preventDefault();\n\n          // if the state has no URL, ignore one preventDefault from the <a> directive.\n          var ignorePreventDefaultCount = isAnchor && !newHref ? 1: 0;\n          e.preventDefault = function() {\n            if (ignorePreventDefaultCount-- <= 0)\n              $timeout.cancel(transition);\n          };\n        }\n      });\n    }\n  };\n}\n\n/**\n * @ngdoc directive\n * @name ui.router.state.directive:ui-sref-active\n *\n * @requires ui.router.state.$state\n * @requires ui.router.state.$stateParams\n * @requires $interpolate\n *\n * @restrict A\n *\n * @description\n * A directive working alongside ui-sref to add classes to an element when the\n * related ui-sref directive's state is active, and removing them when it is inactive.\n * The primary use-case is to simplify the special appearance of navigation menus\n * relying on `ui-sref`, by having the \"active\" state's menu button appear different,\n * distinguishing it from the inactive menu items.\n *\n * ui-sref-active can live on the same element as ui-sref or on a parent element. The first\n * ui-sref-active found at the same level or above the ui-sref will be used.\n *\n * Will activate when the ui-sref's target state or any child state is active. If you\n * need to activate only when the ui-sref target state is active and *not* any of\n * it's children, then you will use\n * {@link ui.router.state.directive:ui-sref-active-eq ui-sref-active-eq}\n *\n * @example\n * Given the following template:\n * <pre>\n * <ul>\n *   <li ui-sref-active=\"active\" class=\"item\">\n *     <a href ui-sref=\"app.user({user: 'bilbobaggins'})\">@bilbobaggins</a>\n *   </li>\n * </ul>\n * </pre>\n *\n *\n * When the app state is \"app.user\" (or any children states), and contains the state parameter \"user\" with value \"bilbobaggins\",\n * the resulting HTML will appear as (note the 'active' class):\n * <pre>\n * <ul>\n *   <li ui-sref-active=\"active\" class=\"item active\">\n *     <a ui-sref=\"app.user({user: 'bilbobaggins'})\" href=\"/users/bilbobaggins\">@bilbobaggins</a>\n *   </li>\n * </ul>\n * </pre>\n *\n * The class name is interpolated **once** during the directives link time (any further changes to the\n * interpolated value are ignored).\n *\n * Multiple classes may be specified in a space-separated format:\n * <pre>\n * <ul>\n *   <li ui-sref-active='class1 class2 class3'>\n *     <a ui-sref=\"app.user\">link</a>\n *   </li>\n * </ul>\n * </pre>\n */\n\n/**\n * @ngdoc directive\n * @name ui.router.state.directive:ui-sref-active-eq\n *\n * @requires ui.router.state.$state\n * @requires ui.router.state.$stateParams\n * @requires $interpolate\n *\n * @restrict A\n *\n * @description\n * The same as {@link ui.router.state.directive:ui-sref-active ui-sref-active} but will only activate\n * when the exact target state used in the `ui-sref` is active; no child states.\n *\n */\n$StateRefActiveDirective.$inject = ['$state', '$stateParams', '$interpolate'];\nfunction $StateRefActiveDirective($state, $stateParams, $interpolate) {\n  return  {\n    restrict: \"A\",\n    controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\n      var states = [], activeClass;\n\n      // There probably isn't much point in $observing this\n      // uiSrefActive and uiSrefActiveEq share the same directive object with some\n      // slight difference in logic routing\n      activeClass = $interpolate($attrs.uiSrefActiveEq || $attrs.uiSrefActive || '', false)($scope);\n\n      // Allow uiSref to communicate with uiSrefActive[Equals]\n      this.$$addStateInfo = function (newState, newParams) {\n        var state = $state.get(newState, stateContext($element));\n\n        states.push({\n          state: state || { name: newState },\n          params: newParams\n        });\n\n        update();\n      };\n\n      $scope.$on('$stateChangeSuccess', update);\n\n      // Update route state\n      function update() {\n        if (anyMatch()) {\n          $element.addClass(activeClass);\n        } else {\n          $element.removeClass(activeClass);\n        }\n      }\n\n      function anyMatch() {\n        for (var i = 0; i < states.length; i++) {\n          if (isMatch(states[i].state, states[i].params)) {\n            return true;\n          }\n        }\n        return false;\n      }\n\n      function isMatch(state, params) {\n        if (typeof $attrs.uiSrefActiveEq !== 'undefined') {\n          return $state.is(state.name, params);\n        } else {\n          return $state.includes(state.name, params);\n        }\n      }\n    }]\n  };\n}\n\nangular.module('ui.router.state')\n  .directive('uiSref', $StateRefDirective)\n  .directive('uiSrefActive', $StateRefActiveDirective)\n  .directive('uiSrefActiveEq', $StateRefActiveDirective);\n\n/**\n * @ngdoc filter\n * @name ui.router.state.filter:isState\n *\n * @requires ui.router.state.$state\n *\n * @description\n * Translates to {@link ui.router.state.$state#methods_is $state.is(\"stateName\")}.\n */\n$IsStateFilter.$inject = ['$state'];\nfunction $IsStateFilter($state) {\n  var isFilter = function (state) {\n    return $state.is(state);\n  };\n  isFilter.$stateful = true;\n  return isFilter;\n}\n\n/**\n * @ngdoc filter\n * @name ui.router.state.filter:includedByState\n *\n * @requires ui.router.state.$state\n *\n * @description\n * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.\n */\n$IncludedByStateFilter.$inject = ['$state'];\nfunction $IncludedByStateFilter($state) {\n  var includesFilter = function (state) {\n    return $state.includes(state);\n  };\n  includesFilter.$stateful = true;\n  return  includesFilter;\n}\n\nangular.module('ui.router.state')\n  .filter('isState', $IsStateFilter)\n  .filter('includedByState', $IncludedByStateFilter);\n})(window, window.angular);"],"sourceRoot":"/source/"}